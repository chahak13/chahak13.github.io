<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>monte-carlo on Musings</title><link>https://chahak13.github.io/tags/monte-carlo/</link><description>Recent content in monte-carlo on Musings</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 14 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://chahak13.github.io/tags/monte-carlo/index.xml" rel="self" type="application/rss+xml"/><item><title>Monte Carlo integration - Wikipedia</title><link>https://chahak13.github.io/posts/monte_carlo_integration_wikipedia/</link><pubDate>Fri, 14 May 2021 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/monte_carlo_integration_wikipedia/</guid><description>Monte Carlo Integration is a technique for numerical integration using random numbers. It is a type of Monte Carlo methods that can be used to numerically compute a definite integral. The main differing point of such integration is that while standard methods use a regular interval to evaluate the integrand, Monte Carlo uses a random set of points to evaluate. This method is particularly useful for higher-dimensional integrals. There are various methods to perform such an integration: Uniform sampling, stratified sampling, importance sampling, sequential Monte Carlo, and mean field particle methods.</description><content>&lt;p>Monte Carlo Integration is a technique for numerical integration using random numbers. It is a type of Monte Carlo methods that can be used to numerically compute a definite integral. The main differing point of such integration is that while standard methods use a regular interval to evaluate the integrand, Monte Carlo uses a random set of points to evaluate. This method is particularly useful for higher-dimensional integrals. There are various methods to perform such an integration: Uniform sampling, stratified sampling, importance sampling, sequential Monte Carlo, and mean field particle methods. We&amp;rsquo;ll be taking a look at the uniform sampling, and importance sampling methods in brief.&lt;/p>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>At the core of it, Monte Carlo is an approximation method used to approximate the value of the integral as compared to the deterministic approach of methods like the &lt;a href="https://chahak13.github.io/posts/trapezoidal_rule/">trapezoidal-rule&lt;/a>. Each simulation of a monte carlo integral provides a different outcome, which can be averaged over multiple simulations.&lt;/p>
&lt;p>Let I be a multidimensional definite integral defined as&lt;/p>
&lt;p>\[
I=\int_{a}^{b}f(x)dx
\]&lt;/p>
&lt;p>and a random variable \(X_i ~ p(x)\) where \(p(x)\) must be nonzero for all \(x\) where \(f(x)\) is nonzero. Then, the Monte Carlo estimator is defined as&lt;/p>
&lt;p>\[
F_{N} = \frac{1}{N}\sum_{i=1}^{N}\frac{f(X_i)}{p(X_i)}
\]&lt;/p>
&lt;p>The value of \(I\) can be estimated by taking an average of several such Monte Carlo estimator values.&lt;/p>
&lt;h2 id="basic-monte-carlo-estimator">Basic Monte Carlo Estimator&lt;/h2>
&lt;p>The basic monte carlo estimator is a special case of Importance Sampling Estimator case where we sample the points from a uniform random variable, to calculate the integral. Therefore, \(X_i ~ p(x) = c\). This follows that for interval \((a, b)\), the value of \(c = \frac{1}{b-a}\). Therefore, the Monte Carlo estimator then becomes&lt;/p>
&lt;p>We can also extend this to be N-Dimensional. For example, a 3D basic estimator for an integral&lt;/p>
&lt;p>would be defined as&lt;/p>
&lt;p>Therefore, a general rule can be written as follows. For an n-dimensional integral&lt;/p>
&lt;p>the MC Estimator is defined as&lt;/p>
&lt;p>where \(N\) is the number of samples that are taken from the uniform distribution for evaluation.&lt;/p>
&lt;h3 id="simulation">Simulation&lt;/h3>
&lt;p>This method can be simulated fairly easily using python. Let us try and integrate the following function for \(0.8 &amp;lt; x &amp;lt; 3\)&lt;/p>
&lt;p>To do this, we&amp;rsquo;ll first have to define a python function using numpy&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python"> &lt;span style="color:#f92672">import&lt;/span> numpy &lt;span style="color:#66d9ef">as&lt;/span> np
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">f&lt;/span>(x):
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">/&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">+&lt;/span>np&lt;span style="color:#f92672">.&lt;/span>sinh(&lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">*&lt;/span>x)&lt;span style="color:#f92672">*&lt;/span>np&lt;span style="color:#f92672">.&lt;/span>log(x)&lt;span style="color:#f92672">**&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now that we have a function that calculates the value of \(f(x)\) at a given set of points, let us start with the MC estimator. First we will define the limits of the integral \((a, b)\) and the number of estimators \(N\). We will also define the number of points that are sampled.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python"> n_estimators &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>
N &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>
a, b &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0.8&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, we need to perform the calculation for each MC estimator and find the average. We can do this more efficiently by using numpy&amp;rsquo;s vector operations and random number generator.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python"> rng &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>random&lt;span style="color:#f92672">.&lt;/span>default_rng()
r &lt;span style="color:#f92672">=&lt;/span> rng&lt;span style="color:#f92672">.&lt;/span>uniform(a, b, size&lt;span style="color:#f92672">=&lt;/span>(n_estimators, N))
result &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">/&lt;/span>n_estimators)&lt;span style="color:#f92672">*&lt;/span>((b&lt;span style="color:#f92672">-&lt;/span>a)&lt;span style="color:#f92672">/&lt;/span>N)&lt;span style="color:#f92672">*&lt;/span>(np&lt;span style="color:#f92672">.&lt;/span>sum(f(r)))
result
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">0.6786189790691812
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can check this result by comparing it with the function &lt;code>scipy.integrate.quad&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python"> &lt;span style="color:#f92672">from&lt;/span> scipy &lt;span style="color:#f92672">import&lt;/span> integrate
integrate&lt;span style="color:#f92672">.&lt;/span>quad(f, a, b)[&lt;span style="color:#ae81ff">0&lt;/span>]
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">0.6768400757156462
&lt;/code>&lt;/pre>&lt;/div>&lt;p>As we can see, the two results are fairly similar. Do note that the result due to MC estimators is bound to change but it is still a fairly close estimate to the integration function from scipy.&lt;/p>
&lt;h2 id="importance-sampling">Importance Sampling&lt;/h2>
&lt;p>The formula for a MC estimator that we saw above was for an importance sampling estimator. What it means is that, instead of choosing random points over an interval with uniform probability, we try to sample points based on its expected contribution to the integral. This means that instead of a uniform distribution, we use a distribution \(p(x)\) of our choice that we hope makes the calculation more efficient. The intuition behind this is that if a particular point \(x_i\) is picked up with a higher probability, then we weigh it down by a factor of its probability \(p(x_i)\).&lt;/p></content></item><item><title>Estimating residence-time matrix</title><link>https://chahak13.github.io/posts/estimating_residence_time_matrix/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/estimating_residence_time_matrix/</guid><description>Extending Notes on: Horne, J. S., Garton, E. O., Krone, S. M., &amp;amp; Lewis, J. S. (2007): Analyzing Animal Movements Using Brownian Bridges, we now want to calculate the residence-time matrix for various polygons (AGEBs). To do this, we will use the geopandas library along with the data from Hermisillo that we have for a set of individuals. We will currently work with the data of just one individual.
AGEB data The data for the AGEBs was provided by INEGI (National Institute of Statistics and Geography).</description><content>&lt;p>Extending Notes on: Horne, J. S., Garton, E. O., Krone, S. M., &amp;amp; Lewis, J. S. (2007): Analyzing Animal Movements Using Brownian Bridges, we now want to calculate the residence-time matrix for various polygons (AGEBs). To do this, we will use the &lt;code>geopandas&lt;/code> library along with the data from Hermisillo that we have for a set of individuals. We will currently work with the data of just one individual.&lt;/p>
&lt;h2 id="ageb-data">AGEB data&lt;/h2>
&lt;p>The data for the AGEBs was provided by INEGI (National Institute of Statistics and Geography). There are a total of 582 AGEBs of which we might discard some that are not of interest. From the data, we particularly care about &lt;code>CVE_AGEB&lt;/code> and the geometry - which is a polygon.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">import&lt;/span> geopandas &lt;span style="color:#66d9ef">as&lt;/span> gpd
data &lt;span style="color:#f92672">=&lt;/span> gpd&lt;span style="color:#f92672">.&lt;/span>read_file(&lt;span style="color:#e6db74">&amp;#34;/home/boticelli/Documents/uta/code/residence-time/bbmm-drive/26a.shp&amp;#34;&lt;/span>)
data&lt;span style="color:#f92672">.&lt;/span>head()
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can confirm that there are 582 AGEBs by checking the number of rows in the dataframe &lt;code>data&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python"> len(data)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Each &lt;code>GeoSeries&lt;/code> has a corresponding &lt;em>CRS&lt;/em> (Coordinate Reference System) that defines the system used for the projection. If a &lt;code>GeoDataFrame&lt;/code> has only one column that corresponds to a &lt;code>GeoSeries&lt;/code>, then the CRS of that series corresponds to the CRS of the dataframe. A dataframe can also have multiple &lt;code>GeoSeries&lt;/code>, each with their own corresponding CRS. In such a case, one of the series is designated as the active geometry column and is used by default for any geometrical operations.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">data&lt;span style="color:#f92672">.&lt;/span>crs
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here, the data we have is in the &amp;ldquo;MEXICO_ITRF_2008_LCC&amp;rdquo; system. We will now transform the system to a Pseudomercator system for ease of use. This can be done using the &lt;code>geopandas.GeoDataFrame.to_crs&lt;/code> function. The EPSG code corresponding to Pseudomercator projection is &lt;em>EPSG:3857&lt;/em>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">data&lt;span style="color:#f92672">.&lt;/span>to_crs(&lt;span style="color:#e6db74">&amp;#34;EPSG:3857&amp;#34;&lt;/span>, inplace&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can also visualize this data using plotting functionality in geopandas and matplotlib.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">import&lt;/span> matplotlib.pyplot &lt;span style="color:#66d9ef">as&lt;/span> plt
data&lt;span style="color:#f92672">.&lt;/span>plot(figsize&lt;span style="color:#f92672">=&lt;/span>(&lt;span style="color:#ae81ff">5&lt;/span>,&lt;span style="color:#ae81ff">5&lt;/span>))
plt&lt;span style="color:#f92672">.&lt;/span>savefig(&lt;span style="color:#e6db74">&amp;#39;/home/boticelli/Documents/uta/code/residence-time/agebs.png&amp;#39;&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div></content></item></channel></rss>