<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Musings</title><link>https://chahak13.github.io/posts/</link><description>Recent content in Posts on Musings</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 09 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://chahak13.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Org publish site</title><link>https://chahak13.github.io/posts/org_publish_site/</link><pubDate>Thu, 09 Dec 2021 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/org_publish_site/</guid><description>org-publish-project-alist is the main variable to configure to set up the publishing of projects. It can be configured as a well formed property list with alternating keys and values.
This can be used to publish the org-roam entries.
(setq org-publish-project-alist &amp;#39;((&amp;#34;hugo&amp;#34; :base-directory &amp;#34;~/Documents/org/roam/org/&amp;#34; :publishing-directory &amp;#34;~/Documents/chahak13.github.io/&amp;#34; :section-numbers nil :table-of-contents nil :publishing-function org-hugo-export-to-md :base-extension &amp;#34;org&amp;#34; ))) (defvar blog-src-dir &amp;#34;/Users/cmehta/Dropbox/Mac/Documents/org/roam/org&amp;#34;) (setq org-hugo-base-dir &amp;#34;/Users/cmehta/Documents/chahak13.github.io/&amp;#34;) (defun cm/publish-blog () &amp;#34;Export all org file entries to hugo markdown in the blog content dir.</description><content>&lt;p>&lt;code>org-publish-project-alist&lt;/code> is the main variable to configure to set up the publishing of projects. It can be configured as a well formed property list with alternating keys and values.&lt;/p>
&lt;p>This can be used to publish the org-roam entries.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">(setq org-publish-project-alist
&amp;#39;((&amp;#34;hugo&amp;#34;
:base-directory &amp;#34;~/Documents/org/roam/org/&amp;#34;
:publishing-directory &amp;#34;~/Documents/chahak13.github.io/&amp;#34;
:section-numbers nil
:table-of-contents nil
:publishing-function org-hugo-export-to-md
:base-extension &amp;#34;org&amp;#34;
)))
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">(defvar blog-src-dir &lt;span style="color:#e6db74">&amp;#34;/Users/cmehta/Dropbox/Mac/Documents/org/roam/org&amp;#34;&lt;/span>)
(setq org-hugo-base-dir &lt;span style="color:#e6db74">&amp;#34;/Users/cmehta/Documents/chahak13.github.io/&amp;#34;&lt;/span>)
(defun cm/publish-blog ()
&lt;span style="color:#e6db74">&amp;#34;Export all org file entries to hugo markdown in the blog content dir.&amp;#34;&lt;/span>
(interactive)
(setq blog-posts (&lt;span style="color:#a6e22e">directory-files&lt;/span> blog-src-dir &lt;span style="color:#66d9ef">t&lt;/span> &lt;span style="color:#e6db74">&amp;#34;\.org$&amp;#34;&lt;/span>))
(dolist (file blog-posts)
(org-hugo--export-file-to-md file &lt;span style="color:#66d9ef">t&lt;/span>)
&lt;span style="color:#75715e">;; (print file)&lt;/span>
))
(cm/publish-blog)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Publishing single file using &lt;code>ox-hugo&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">(require &lt;span style="color:#e6db74">&amp;#39;find-lisp&lt;/span>)
(with-current-buffer (find-file-noselect (&lt;span style="color:#a6e22e">expand-file-name&lt;/span> &lt;span style="color:#e6db74">&amp;#34;moonlander-notes.org&amp;#34;&lt;/span> blog-src-dir))
(setq org-agenda-text-search-extra-files (find-lisp-find-files blog-src-dir &lt;span style="color:#e6db74">&amp;#34;\.org$&amp;#34;&lt;/span>))
(org-hugo-export-wim-to-md))
&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>PoC: Stackoverflow parser</title><link>https://chahak13.github.io/posts/stackoverflow_parser/</link><pubDate>Wed, 08 Dec 2021 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/stackoverflow_parser/</guid><description>Load the requests and BeautifulSoup libraries that will be used for scraping the webpage.
import sys import re import requests from bs4 import BeautifulSoup as bs As a proof of concept, we will grab a random stackoverflow question that has more than one answers, one accepted answer, and code as a part of the answer to try and cover the major cases (still need to check about images). One such example is - https://stackoverflow.</description><content>&lt;p>Load the &lt;code>requests&lt;/code> and &lt;code>BeautifulSoup&lt;/code> libraries that will be used for scraping the webpage.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">import&lt;/span> sys
&lt;span style="color:#f92672">import&lt;/span> re
&lt;span style="color:#f92672">import&lt;/span> requests
&lt;span style="color:#f92672">from&lt;/span> bs4 &lt;span style="color:#f92672">import&lt;/span> BeautifulSoup &lt;span style="color:#66d9ef">as&lt;/span> bs
&lt;/code>&lt;/pre>&lt;/div>&lt;p>As a proof of concept, we will grab a random stackoverflow question that has more than one answers, one accepted answer, and code as a part of the answer to try and cover the major cases (still need to check about images). One such example is - &lt;a href="https://stackoverflow.com/questions/357307/how-to-call-a-parent-class-function-from-derived-class-function">https://stackoverflow.com/questions/357307/how-to-call-a-parent-class-function-from-derived-class-function&lt;/a>&lt;/p>
&lt;p>We&amp;rsquo;ll download the webpage for further scrutiny using the &lt;code>requests.get&lt;/code> function and then parsing it using &lt;code>BeautifulSoup&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">url &lt;span style="color:#f92672">=&lt;/span> sys&lt;span style="color:#f92672">.&lt;/span>argv[&lt;span style="color:#ae81ff">1&lt;/span>]
&lt;span style="color:#75715e"># url = &amp;#34;https://math.stackexchange.com/questions/1339709/how-to-derive-the-weak-form-of-the-pde&amp;#34;&lt;/span>
base_url &lt;span style="color:#f92672">=&lt;/span> url&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>)[&lt;span style="color:#ae81ff">2&lt;/span>]
response &lt;span style="color:#f92672">=&lt;/span> requests&lt;span style="color:#f92672">.&lt;/span>get(url)
&lt;span style="color:#66d9ef">if&lt;/span> response&lt;span style="color:#f92672">.&lt;/span>ok:
soup &lt;span style="color:#f92672">=&lt;/span> bs(response&lt;span style="color:#f92672">.&lt;/span>text, features&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;html.parser&amp;#34;&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>There are two main classes of objects that are of our interest - 1. Question and 2. Answers (with possibly an accepted marker). Looking at the source code tells us that there are &lt;code>question&lt;/code> and &lt;code>answer&lt;/code> properties that can be used to filter them out. We&amp;rsquo;ll take a stab at finding the question first.&lt;/p>
&lt;p>A point to note, we cannot directly search for &lt;code>question-hyperlink&lt;/code> links because there are other questions on the page too, so we need to first extract the question header from where we can get the required title.&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">question_header &lt;span style="color:#f92672">=&lt;/span> soup&lt;span style="color:#f92672">.&lt;/span>find(&lt;span style="color:#e6db74">&amp;#39;div&amp;#39;&lt;/span>, {&lt;span style="color:#e6db74">&amp;#39;id&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;question-header&amp;#39;&lt;/span>})
question_title &lt;span style="color:#f92672">=&lt;/span> question_header&lt;span style="color:#f92672">.&lt;/span>find(&lt;span style="color:#e6db74">&amp;#39;a&amp;#39;&lt;/span>, {&lt;span style="color:#e6db74">&amp;#39;class&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;question-hyperlink&amp;#39;&lt;/span>})&lt;span style="color:#f92672">.&lt;/span>text&lt;span style="color:#f92672">.&lt;/span>strip()
question_link &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;https://&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>base_url&lt;span style="color:#e6db74">}{&lt;/span>question_header&lt;span style="color:#f92672">.&lt;/span>find(&lt;span style="color:#e6db74">&amp;#39;a&amp;#39;&lt;/span>, {&lt;span style="color:#e6db74">&amp;#39;class&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;question-hyperlink&amp;#39;&lt;/span>})&lt;span style="color:#f92672">.&lt;/span>get(&lt;span style="color:#e6db74">&amp;#39;href&amp;#39;&lt;/span>)&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#75715e"># print((question_title, question_link))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;!-- raw HTML omitted -->
&lt;p>Now that we have the title and the link to the question, we parse for the question content.&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">prog &lt;span style="color:#f92672">=&lt;/span> re&lt;span style="color:#f92672">.&lt;/span>compile(&lt;span style="color:#e6db74">r&lt;/span>&lt;span style="color:#e6db74">&amp;#34;\&amp;lt;a .*?\/a\&amp;gt;&amp;#34;&lt;/span>)
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">parse_post&lt;/span>(post_banner):
elements &lt;span style="color:#f92672">=&lt;/span> post_banner&lt;span style="color:#f92672">.&lt;/span>find_all(recursive&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">False&lt;/span>)
name_set &lt;span style="color:#f92672">=&lt;/span> {&lt;span style="color:#e6db74">&amp;#39;p&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;pre&amp;#39;&lt;/span>}
full_post &lt;span style="color:#f92672">=&lt;/span> []
&lt;span style="color:#66d9ef">for&lt;/span> element &lt;span style="color:#f92672">in&lt;/span> elements:
&lt;span style="color:#66d9ef">if&lt;/span> element&lt;span style="color:#f92672">.&lt;/span>name &lt;span style="color:#f92672">in&lt;/span> name_set:
&lt;span style="color:#66d9ef">if&lt;/span> element&lt;span style="color:#f92672">.&lt;/span>name &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;p&amp;#34;&lt;/span>:
post &lt;span style="color:#f92672">=&lt;/span> str(element)
post &lt;span style="color:#f92672">=&lt;/span> post&lt;span style="color:#f92672">.&lt;/span>removeprefix(&lt;span style="color:#e6db74">&amp;#34;&amp;lt;p&amp;gt;&amp;#34;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>removesuffix(&lt;span style="color:#e6db74">&amp;#34;&amp;lt;/p&amp;gt;&amp;#34;&lt;/span>)
&lt;span style="color:#75715e"># Wrap code blocks in ~&lt;/span>
post &lt;span style="color:#f92672">=&lt;/span> post&lt;span style="color:#f92672">.&lt;/span>replace(&lt;span style="color:#e6db74">&amp;#34;&amp;lt;code&amp;gt;&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;~&amp;#34;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>replace(&lt;span style="color:#e6db74">&amp;#34;&amp;lt;/code&amp;gt;&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;~&amp;#34;&lt;/span>)
&lt;span style="color:#75715e"># Wrap emphasis in /&lt;/span>
post &lt;span style="color:#f92672">=&lt;/span> post&lt;span style="color:#f92672">.&lt;/span>replace(&lt;span style="color:#e6db74">&amp;#34;&amp;lt;em&amp;gt;&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>replace(&lt;span style="color:#e6db74">&amp;#34;&amp;lt;/em&amp;gt;&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>)
&lt;span style="color:#75715e"># Wrap bold in *&lt;/span>
post &lt;span style="color:#f92672">=&lt;/span> post&lt;span style="color:#f92672">.&lt;/span>replace(&lt;span style="color:#e6db74">&amp;#34;&amp;lt;strong&amp;gt;&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;*&amp;#34;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>replace(&lt;span style="color:#e6db74">&amp;#34;&amp;lt;/strong&amp;gt;&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;*&amp;#34;&lt;/span>)
&lt;span style="color:#75715e"># Change href links to org links&lt;/span>
result &lt;span style="color:#f92672">=&lt;/span> prog&lt;span style="color:#f92672">.&lt;/span>finditer(post)
&lt;span style="color:#66d9ef">for&lt;/span> res &lt;span style="color:#f92672">in&lt;/span> result:
temp &lt;span style="color:#f92672">=&lt;/span> bs(res&lt;span style="color:#f92672">.&lt;/span>group(&lt;span style="color:#ae81ff">0&lt;/span>), features&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;html.parser&amp;#34;&lt;/span>)
href_link &lt;span style="color:#f92672">=&lt;/span> temp&lt;span style="color:#f92672">.&lt;/span>find(&lt;span style="color:#e6db74">&amp;#39;a&amp;#39;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>get(&lt;span style="color:#e6db74">&amp;#39;href&amp;#39;&lt;/span>)
href_text &lt;span style="color:#f92672">=&lt;/span> temp&lt;span style="color:#f92672">.&lt;/span>text
post &lt;span style="color:#f92672">=&lt;/span> prog&lt;span style="color:#f92672">.&lt;/span>sub(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;[[&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>href_link&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">][&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>href_text&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">]]&amp;#34;&lt;/span>, post, count&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)
full_post&lt;span style="color:#f92672">.&lt;/span>append(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>post&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;span style="color:#66d9ef">else&lt;/span>:
codeblock &lt;span style="color:#f92672">=&lt;/span> element&lt;span style="color:#f92672">.&lt;/span>find(&lt;span style="color:#e6db74">&amp;#39;code&amp;#39;&lt;/span>)
lang &lt;span style="color:#f92672">=&lt;/span> codeblock&lt;span style="color:#f92672">.&lt;/span>get(&lt;span style="color:#e6db74">&amp;#39;class&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;lang-&amp;#34;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>rsplit(&lt;span style="color:#e6db74">&amp;#39;-&amp;#39;&lt;/span>)[&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]
begin_tag &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;#+begin_example &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>lang&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
end_tag &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;#+end_example&amp;#34;&lt;/span>
code &lt;span style="color:#f92672">=&lt;/span> codeblock&lt;span style="color:#f92672">.&lt;/span>text
full_post&lt;span style="color:#f92672">.&lt;/span>append(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>begin_tag&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>code&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>end_tag&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
post_text &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>join(full_post)
&lt;span style="color:#66d9ef">return&lt;/span> post_text
question &lt;span style="color:#f92672">=&lt;/span> soup&lt;span style="color:#f92672">.&lt;/span>find(&lt;span style="color:#e6db74">&amp;#39;div&amp;#39;&lt;/span>, {&lt;span style="color:#e6db74">&amp;#39;id&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;question&amp;#39;&lt;/span>})
post_banner &lt;span style="color:#f92672">=&lt;/span> question&lt;span style="color:#f92672">.&lt;/span>find(&lt;span style="color:#e6db74">&amp;#39;div&amp;#39;&lt;/span>, {&lt;span style="color:#e6db74">&amp;#39;class&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;s-prose&amp;#39;&lt;/span>})
question_text &lt;span style="color:#f92672">=&lt;/span> parse_post(post_banner)
&lt;span style="color:#75715e"># print(question_text)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;!-- raw HTML omitted -->
&lt;p>Each question also contains comments that can be really useful, so we will try to parse them too.&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">parse_comments&lt;/span>(cell):
comments &lt;span style="color:#f92672">=&lt;/span> []
&lt;span style="color:#66d9ef">for&lt;/span> comment &lt;span style="color:#f92672">in&lt;/span> cell&lt;span style="color:#f92672">.&lt;/span>find_all(&lt;span style="color:#e6db74">&amp;#39;div&amp;#39;&lt;/span>, {&lt;span style="color:#e6db74">&amp;#39;class&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;comment-body&amp;#39;&lt;/span>}):
comment_str &lt;span style="color:#f92672">=&lt;/span> comment&lt;span style="color:#f92672">.&lt;/span>find(&lt;span style="color:#e6db74">&amp;#39;span&amp;#39;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>text
&lt;span style="color:#66d9ef">try&lt;/span>:
comment_user &lt;span style="color:#f92672">=&lt;/span> comment&lt;span style="color:#f92672">.&lt;/span>find(&lt;span style="color:#e6db74">&amp;#39;a&amp;#39;&lt;/span>, {&lt;span style="color:#e6db74">&amp;#39;class&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;comment-user&amp;#39;&lt;/span>})&lt;span style="color:#f92672">.&lt;/span>text
&lt;span style="color:#66d9ef">except&lt;/span>:
comment_user &lt;span style="color:#f92672">=&lt;/span> comment&lt;span style="color:#f92672">.&lt;/span>find(&lt;span style="color:#e6db74">&amp;#39;span&amp;#39;&lt;/span>, {&lt;span style="color:#e6db74">&amp;#39;class&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;comment-user&amp;#39;&lt;/span>})&lt;span style="color:#f92672">.&lt;/span>text
comments&lt;span style="color:#f92672">.&lt;/span>append(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;+ (/&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>comment_user&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/) &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>comment_str&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
comments_text &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>join(comments)
&lt;span style="color:#66d9ef">return&lt;/span> comments_text
question_comments &lt;span style="color:#f92672">=&lt;/span> parse_comments(question)
&lt;span style="color:#75715e"># print(question_comments)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;!-- raw HTML omitted -->
&lt;p>We can now combine all the parts to create a complete org question string.&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">question_org_str &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;* [[&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>question_link&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">][&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>question_title&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">]]&lt;/span>&lt;span style="color:#ae81ff">\n\n&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>question_text&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">Comments&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>question_comments&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#75715e"># print(question_org_str)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;!-- raw HTML omitted -->
&lt;p>Now that we have covered most of the question components, we will start parsing the answers.&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">answers &lt;span style="color:#f92672">=&lt;/span> []
&lt;span style="color:#66d9ef">for&lt;/span> i, answer &lt;span style="color:#f92672">in&lt;/span> enumerate(soup&lt;span style="color:#f92672">.&lt;/span>find_all(&lt;span style="color:#e6db74">&amp;#39;div&amp;#39;&lt;/span>, {&lt;span style="color:#e6db74">&amp;#39;class&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;answer&amp;#39;&lt;/span>})):
answer_post &lt;span style="color:#f92672">=&lt;/span> answer&lt;span style="color:#f92672">.&lt;/span>find(&lt;span style="color:#e6db74">&amp;#39;div&amp;#39;&lt;/span>, {&lt;span style="color:#e6db74">&amp;#39;class&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;post-layout&amp;#39;&lt;/span>})
answer_cell &lt;span style="color:#f92672">=&lt;/span> answer_post&lt;span style="color:#f92672">.&lt;/span>find(&lt;span style="color:#e6db74">&amp;#39;div&amp;#39;&lt;/span>, {&lt;span style="color:#e6db74">&amp;#39;class&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;answercell&amp;#39;&lt;/span>})&lt;span style="color:#f92672">.&lt;/span>find(&lt;span style="color:#e6db74">&amp;#39;div&amp;#39;&lt;/span>, {&lt;span style="color:#e6db74">&amp;#39;class&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;s-prose&amp;#39;&lt;/span>})
answer_str &lt;span style="color:#f92672">=&lt;/span> parse_post(answer_cell)
answer_comments &lt;span style="color:#f92672">=&lt;/span> parse_comments(answer_post)
answers&lt;span style="color:#f92672">.&lt;/span>append(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;** Answer &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>i&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#ae81ff">\n\n&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>answer_str&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74"> Comments:&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>answer_comments&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
answer_org_str &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>join(answers)
&lt;span style="color:#75715e"># print(answer_org_str)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;!-- raw HTML omitted -->
&lt;p>We now have all the required components to write an org file for the stackoverflow question now. Let&amp;rsquo;s compile everything and write it to a file.&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">title_lowercase &lt;span style="color:#f92672">=&lt;/span> question_title&lt;span style="color:#f92672">.&lt;/span>lower()
filename &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/Users/cmehta/Documents/org/roam/org/&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>&lt;span style="color:#e6db74">&amp;#39;_&amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>join(title_lowercase&lt;span style="color:#f92672">.&lt;/span>split())&lt;span style="color:#f92672">.&lt;/span>removesuffix(&lt;span style="color:#e6db74">&amp;#39;?&amp;#39;&lt;/span>)&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">.org&amp;#34;&lt;/span>
full_file_str &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;:PROPERTIES:&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;:ID: &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>&lt;span style="color:#e6db74">&amp;#39;-&amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>join(title_lowercase&lt;span style="color:#f92672">.&lt;/span>split())&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;:END:&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;#+title: &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>question_title&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#ae81ff">\n\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>question_org_str&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>answer_org_str&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;span style="color:#66d9ef">with&lt;/span> open(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>filename&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;w&amp;#34;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> f:
f&lt;span style="color:#f92672">.&lt;/span>write(full_file_str)
&lt;/code>&lt;/pre>&lt;/div>&lt;!-- raw HTML omitted -->
&lt;p>We can now create a bookmarklet that we can install in the browser. Then, we can just click on whatever stackoverflow page we want to save for future reference.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">$.ajax({
type: &amp;#34;POST&amp;#34;,
url: &amp;#34;/Users/cmehta/Documents/org/roam/org/stackoverflow_parser.py &amp;#34; + document.URL,
crossdomain: true,
}).done(function() {
alert(&amp;#34;Saved to roam!&amp;#34;);
});
&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>moonlander notes</title><link>https://chahak13.github.io/posts/moonlander_notes/</link><pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/moonlander_notes/</guid><description> angular brackets. needed for org source blocks. * on main layer for org hash on main layer better placements for space and backspace better placement for the layer switches M-; acts as M-: for some reason. space on both sides</description><content>&lt;ul>
&lt;li>angular brackets. needed for org source blocks.&lt;/li>
&lt;li>* on main layer for org&lt;/li>
&lt;li>hash on main layer&lt;/li>
&lt;li>better placements for space and backspace&lt;/li>
&lt;li>better placement for the layer switches&lt;/li>
&lt;li>&lt;code>M-;&lt;/code> acts as &lt;code>M-:&lt;/code> for some reason.&lt;/li>
&lt;li>space on both sides&lt;/li>
&lt;/ul></content></item><item><title>Org speed commands</title><link>https://chahak13.github.io/posts/org_speed_commands/</link><pubDate>Thu, 18 Nov 2021 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/org_speed_commands/</guid><description>((&amp;#34;Outline Navigation&amp;#34;) (&amp;#34;n&amp;#34; org-speed-move-safe &amp;#39;org-next-visible-heading) (&amp;#34;p&amp;#34; org-speed-move-safe &amp;#39;org-previous-visible-heading) (&amp;#34;f&amp;#34; org-speed-move-safe &amp;#39;org-forward-heading-same-level) (&amp;#34;b&amp;#34; org-speed-move-safe &amp;#39;org-backward-heading-same-level) (&amp;#34;F&amp;#34; . org-next-block) (&amp;#34;B&amp;#34; . org-previous-block) (&amp;#34;u&amp;#34; org-speed-move-safe &amp;#39;outline-up-heading) (&amp;#34;j&amp;#34; . org-goto) (&amp;#34;g&amp;#34; org-refile &amp;#39;(4)) (&amp;#34;Outline Visibility&amp;#34;) (&amp;#34;c&amp;#34; . org-cycle) (&amp;#34;C&amp;#34; . org-shifttab) (&amp;#34; &amp;#34; . org-display-outline-path) (&amp;#34;s&amp;#34; . org-toggle-narrow-to-subtree) (&amp;#34;k&amp;#34; . org-cut-subtree) (&amp;#34;=&amp;#34; . org-columns) (&amp;#34;Outline Structure Editing&amp;#34;) (&amp;#34;U&amp;#34; . org-metaup) (&amp;#34;D&amp;#34; . org-metadown) (&amp;#34;r&amp;#34; . org-metaright) (&amp;#34;l&amp;#34; . org-metaleft) (&amp;#34;R&amp;#34; . org-shiftmetaright) (&amp;#34;L&amp;#34; . org-shiftmetaleft) (&amp;#34;i&amp;#34; progn (forward-char 1) (call-interactively &amp;#39;org-insert-heading-respect-content)) (&amp;#34;^&amp;#34; .</description><content>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">((&amp;#34;Outline Navigation&amp;#34;)
(&amp;#34;n&amp;#34; org-speed-move-safe &amp;#39;org-next-visible-heading)
(&amp;#34;p&amp;#34; org-speed-move-safe &amp;#39;org-previous-visible-heading)
(&amp;#34;f&amp;#34; org-speed-move-safe &amp;#39;org-forward-heading-same-level)
(&amp;#34;b&amp;#34; org-speed-move-safe &amp;#39;org-backward-heading-same-level)
(&amp;#34;F&amp;#34; . org-next-block)
(&amp;#34;B&amp;#34; . org-previous-block)
(&amp;#34;u&amp;#34; org-speed-move-safe &amp;#39;outline-up-heading)
(&amp;#34;j&amp;#34; . org-goto)
(&amp;#34;g&amp;#34; org-refile
&amp;#39;(4))
(&amp;#34;Outline Visibility&amp;#34;)
(&amp;#34;c&amp;#34; . org-cycle)
(&amp;#34;C&amp;#34; . org-shifttab)
(&amp;#34; &amp;#34; . org-display-outline-path)
(&amp;#34;s&amp;#34; . org-toggle-narrow-to-subtree)
(&amp;#34;k&amp;#34; . org-cut-subtree)
(&amp;#34;=&amp;#34; . org-columns)
(&amp;#34;Outline Structure Editing&amp;#34;)
(&amp;#34;U&amp;#34; . org-metaup)
(&amp;#34;D&amp;#34; . org-metadown)
(&amp;#34;r&amp;#34; . org-metaright)
(&amp;#34;l&amp;#34; . org-metaleft)
(&amp;#34;R&amp;#34; . org-shiftmetaright)
(&amp;#34;L&amp;#34; . org-shiftmetaleft)
(&amp;#34;i&amp;#34; progn
(forward-char 1)
(call-interactively &amp;#39;org-insert-heading-respect-content))
(&amp;#34;^&amp;#34; . org-sort)
(&amp;#34;w&amp;#34; . org-refile)
(&amp;#34;a&amp;#34; . org-archive-subtree-default-with-confirmation)
(&amp;#34;@&amp;#34; . org-mark-subtree)
(&amp;#34;#&amp;#34; . org-toggle-comment)
(&amp;#34;Clock Commands&amp;#34;)
(&amp;#34;I&amp;#34; . org-clock-in)
(&amp;#34;O&amp;#34; . org-clock-out)
(&amp;#34;Meta Data Editing&amp;#34;)
(&amp;#34;t&amp;#34; . org-todo)
(&amp;#34;,&amp;#34; org-priority)
(&amp;#34;0&amp;#34; org-priority 32)
(&amp;#34;1&amp;#34; org-priority 65)
(&amp;#34;2&amp;#34; org-priority 66)
(&amp;#34;3&amp;#34; org-priority 67)
(&amp;#34;:&amp;#34; . org-set-tags-command)
(&amp;#34;e&amp;#34; . org-set-effort)
(&amp;#34;E&amp;#34; . org-inc-effort)
(&amp;#34;W&amp;#34; lambda
(m)
(interactive &amp;#34;sMinutes before warning: &amp;#34;)
(org-entry-put
(point)
&amp;#34;APPT_WARNTIME&amp;#34; m))
(&amp;#34;Agenda Views etc&amp;#34;)
(&amp;#34;v&amp;#34; . org-agenda)
(&amp;#34;/&amp;#34; . org-sparse-tree)
(&amp;#34;Misc&amp;#34;)
(&amp;#34;o&amp;#34; . org-open-at-point)
(&amp;#34;?&amp;#34; . org-speed-command-help)
(&amp;#34;&amp;lt;&amp;#34; org-agenda-set-restriction-lock &amp;#39;subtree)
(&amp;#34;&amp;gt;&amp;#34; org-agenda-remove-restriction-lock))
&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>Mbsync</title><link>https://chahak13.github.io/posts/20211117151012-mbsync/</link><pubDate>Thu, 11 Nov 2021 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/20211117151012-mbsync/</guid><description># marks comments. Strings with spaces should be enclosed in double quotes (&amp;quot;) Two basic object classes: Stores and Channels. Two auxiliary objects Accounts and Groups Store: Defines a collection of mailboxes; basically a folder, either local or remote. Channel: Connects two Stores, describing the way the two are synchronized. Accound: Describes the connection part of network Stores, so server configureations can be shared between multiple Stores. Group: Aggregates multiple Channels to save typing on the command line.</description><content>&lt;ul>
&lt;li>&lt;code>#&lt;/code> marks comments.&lt;/li>
&lt;li>Strings with spaces should be enclosed in double quotes (&lt;code>&amp;quot;&lt;/code>)&lt;/li>
&lt;li>Two basic object classes: &lt;code>Stores&lt;/code> and &lt;code>Channels&lt;/code>. Two auxiliary objects &lt;code>Accounts&lt;/code> and &lt;code>Groups&lt;/code>
&lt;ul>
&lt;li>&lt;code>Store&lt;/code>: Defines a collection of mailboxes; basically a folder, either local or remote.&lt;/li>
&lt;li>&lt;code>Channel&lt;/code>: Connects two Stores, describing the way the two are synchronized.&lt;/li>
&lt;li>&lt;code>Accound&lt;/code>: Describes the connection part of network Stores, so server configureations can be shared between multiple Stores.&lt;/li>
&lt;li>&lt;code>Group&lt;/code>: Aggregates multiple Channels to save typing on the command line.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>File system locations (in particular, &lt;code>Path&lt;/code> and &lt;code>Inbox&lt;/code>) use the &lt;code>Store&lt;/code>&amp;rsquo;s internal path separators, which may be slashes, periods, etc., or even combinations thereof.&lt;/li>
&lt;li>Mailbox names, OTOH, always use canonical path separators, which are Unix-like forward slashes.&lt;/li>
&lt;/ul>
&lt;h2 id="stores">Stores&lt;/h2></content></item><item><title>Mbsync</title><link>https://chahak13.github.io/posts/mbsync/</link><pubDate>Thu, 11 Nov 2021 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/mbsync/</guid><description># marks comments. Strings with spaces should be enclosed in double quotes (&amp;quot;) Two basic object classes: Stores and Channels. Two auxiliary objects Accounts and Groups Store: Defines a collection of mailboxes; basically a folder, either local or remote. Channel: Connects two Stores, describing the way the two are synchronized. Accound: Describes the connection part of network Stores, so server configureations can be shared between multiple Stores. Group: Aggregates multiple Channels to save typing on the command line.</description><content>&lt;ul>
&lt;li>&lt;code>#&lt;/code> marks comments.&lt;/li>
&lt;li>Strings with spaces should be enclosed in double quotes (&lt;code>&amp;quot;&lt;/code>)&lt;/li>
&lt;li>Two basic object classes: &lt;code>Stores&lt;/code> and &lt;code>Channels&lt;/code>. Two auxiliary objects &lt;code>Accounts&lt;/code> and &lt;code>Groups&lt;/code>
&lt;ul>
&lt;li>&lt;code>Store&lt;/code>: Defines a collection of mailboxes; basically a folder, either local or remote.&lt;/li>
&lt;li>&lt;code>Channel&lt;/code>: Connects two Stores, describing the way the two are synchronized.&lt;/li>
&lt;li>&lt;code>Accound&lt;/code>: Describes the connection part of network Stores, so server configureations can be shared between multiple Stores.&lt;/li>
&lt;li>&lt;code>Group&lt;/code>: Aggregates multiple Channels to save typing on the command line.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>File system locations (in particular, &lt;code>Path&lt;/code> and &lt;code>Inbox&lt;/code>) use the &lt;code>Store&lt;/code>&amp;rsquo;s internal path separators, which may be slashes, periods, etc., or even combinations thereof.&lt;/li>
&lt;li>Mailbox names, OTOH, always use canonical path separators, which are Unix-like forward slashes.&lt;/li>
&lt;/ul>
&lt;h2 id="stores">Stores&lt;/h2></content></item><item><title>Gaussian quadrature in scipy</title><link>https://chahak13.github.io/posts/gaussian_quadrature_in_scipy/</link><pubDate>Wed, 14 Jul 2021 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/gaussian_quadrature_in_scipy/</guid><description>Scipy has an gaussian quadrature integration built-in in the integrate module as the integrate.quadrature function.
import numpy as np from scipy import integrate A simple example of quadrature integration can be seen as follows, where we integrate the simple function \(f(x) = 2x\) from limits 0 to 2.
f = lambda x: 2*x print(&amp;quot;Quadrature integration:&amp;quot;, integrate.quadrature(f, 0, 2)) print(&amp;quot;Analytical solution:&amp;quot;, 2**2) A more complex function can also be passed to the quadrature function.</description><content>&lt;p>Scipy has an gaussian quadrature integration built-in in the &lt;code>integrate&lt;/code> module as the &lt;code>integrate.quadrature&lt;/code> function.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-jupyter-python" data-lang="jupyter-python">import numpy as np
from scipy import integrate
&lt;/code>&lt;/pre>&lt;p>A simple example of quadrature integration can be seen as follows, where we integrate the simple function \(f(x) = 2x\) from limits 0 to 2.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-jupyter-python" data-lang="jupyter-python">f = lambda x: 2*x
print(&amp;quot;Quadrature integration:&amp;quot;, integrate.quadrature(f, 0, 2))
print(&amp;quot;Analytical solution:&amp;quot;, 2**2)
&lt;/code>&lt;/pre>&lt;p>A more complex function can also be passed to the &lt;code>quadrature&lt;/code> function.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-jupyter-python" data-lang="jupyter-python">def func(x):
return x**2 + 2*x + 3
a = 2
print(&amp;quot;Quadrature integration:&amp;quot;, integrate.quadrature(func, 0, 2))
print(&amp;quot;Analytical solution:&amp;quot;, a**3/3 + a**2 + 3*a)
&lt;/code>&lt;/pre>&lt;p>Now, to take into consideration functions that are dependent on more than just the integrating variable.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-jupyter-python" data-lang="jupyter-python">def func_2(t, z):
return z*t + z**2 + 2*t
a = 2
z = 2
print(&amp;quot;Quadrature integration:&amp;quot;, integrate.quadrature(func_2, 0, 2, args=(z,)))
print(&amp;quot;Analytical solution:&amp;quot;, z*a**2/2 + a*z**2 + a**2)
&lt;/code>&lt;/pre>&lt;p>If the function to integrate depends on more variables and even other functions, then we can pass those functions as parameters to the integrating function and solve the quadrature integration.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-jupyter-python" data-lang="jupyter-python">def func_3(t, z, f1, f2):
return f1(t) + z*t + f2(t)**2
f1 = lambda x: x**2
f2 = lambda x: x**3
a, z = 2, 2
print(&amp;quot;Quadrature integration:&amp;quot;, integrate.quadrature(func_3, 0, 2, args=(z, f1, f2)))
print(&amp;quot;Analytical solution:&amp;quot;, a**3/3 + z*a**2/2 + a**7/7)
&lt;/code>&lt;/pre>&lt;p>Functions with vector output need to provide the &lt;code>vec_func&lt;/code> argument as &lt;code>True&lt;/code>.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-jupyter-python" data-lang="jupyter-python">def f(x):
# print(&amp;quot;x:&amp;quot;, x)
# print(&amp;quot;z:&amp;quot;, z)
return z*x*2
z = np.array([2, 3])
integrate.quad_vec(f, 0, 2)
&lt;/code>&lt;/pre>&lt;p>For fixed order Gaussian quadrature integration&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-jupyter-python" data-lang="jupyter-python">f = lambda x, a: np.sin(np.kron(a, x)).reshape(-1, x.shape[0])
x = np.array([1,2,3])
a = np.array([1,2])
print(f(x, a).shape)
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code class="language-jupyter-python" data-lang="jupyter-python">np.kron(a, x)
&lt;/code>&lt;/pre>&lt;p>:results:&lt;/p>
&lt;p>Writing gaussian quadrature integration from scratch using numpy&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-jupyter-python" data-lang="jupyter-python">def norm_pdf(x, mu, sigma):
mu, sigma = mu.reshape(-1, 1), sigma.reshape(-1, 1)
x = x.reshape(-1, 1)
variance = sigma**2
numerator = x - mu
denominator = 2 * variance
pdf = ((1/(np.sqrt(2 * np.pi) * sigma)) * np.exp(-(numerator**2) / denominator))
return pdf
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code class="language-jupyter-python" data-lang="jupyter-python">def h_z(a, b, T_i, x, y, sigma_m2, delta_a, delta_b, indicator, n_time_samples=1000):
mc_sum = np.zeros(x.shape)
t = rng.uniform(0, T_i, size=n_time_samples)
alpha = t/T_i
mu_x = a.x + alpha * (b.x - a.x)
mu_y = a.y + alpha * (b.y - a.y)
sigma = np.sqrt(t * (1 - alpha) * sigma_m2
+ (1 - alpha)**2 * (delta_a**2)
+ (alpha**2) * (delta_b**2))
pdf_x = norm_pdf(x, mu_x, sigma)
pdf_y = norm_pdf(y, mu_y, sigma)
mc_sum += indicator * pdf_x * pdf_y
return mc_sum
&lt;/code>&lt;/pre></content></item><item><title>Status bar in Rust</title><link>https://chahak13.github.io/posts/status_bar_in_rust/</link><pubDate>Wed, 14 Jul 2021 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/status_bar_in_rust/</guid><description/><content/></item><item><title>Suppress warnings in python</title><link>https://chahak13.github.io/posts/suppress_warnings_in_python/</link><pubDate>Wed, 14 Jul 2021 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/suppress_warnings_in_python/</guid><description>While working with packages like numpy and scipy, python can possibly give a lot of warnings. These warnings can be suppressed easily by using the warnings module in the python library.
import warnings warnings.filterwarnings(&amp;#34;ignore&amp;#34;) And done. This should suppress all the warnings your code produces.
NOTE OF CAUTION: Do this only if you know what you&amp;rsquo;re doing and what warnings are being suppressed. Most of the times, having a warning means that something in your code can be improved.</description><content>&lt;p>While working with packages like numpy and scipy, python can possibly give a lot of warnings. These warnings can be suppressed easily by using the warnings module in the python library.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">import&lt;/span> warnings
warnings&lt;span style="color:#f92672">.&lt;/span>filterwarnings(&lt;span style="color:#e6db74">&amp;#34;ignore&amp;#34;&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And done. This should suppress all the warnings your code produces.&lt;/p>
&lt;p>&lt;strong>NOTE OF CAUTION:&lt;/strong> Do this &lt;em>only&lt;/em> if you know what you&amp;rsquo;re doing and what warnings are being suppressed. Most of the times, having a warning means that something in your code can be improved. Hence, warnings should only be suppressed when there is enough information about the warning and it is an informed decision to suppress it.&lt;/p></content></item><item><title>Resampling in Pandas</title><link>https://chahak13.github.io/posts/resampling_in_pandas/</link><pubDate>Mon, 12 Jul 2021 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/resampling_in_pandas/</guid><description>pd.DataFrame.resample can be immensely useful in changing the frequency of a timeseries data.</description><content>&lt;p>&lt;code>pd.DataFrame.resample&lt;/code> can be immensely useful in changing the frequency of a timeseries data.&lt;/p></content></item><item><title>Completion in Emacs</title><link>https://chahak13.github.io/posts/completion_in_emacs/</link><pubDate>Sun, 11 Jul 2021 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/completion_in_emacs/</guid><description>Trying out different completion frameworks for Emacs instead of simply Ivy, just for the heck of it.
(use-package vertico :straight t :init (vertico-mode) :config (setq vertico-cycle t)) (use-package vertico-buffer :after vertico) Also use the orderless completion style to improve the completion methods for vertico/selectrum etc. This also allows using space as delimeter in vertico, since it reads space as a character to match otherwise.
(use-package orderless :straight t :init (setq completion-styles &amp;#39;(orderless)) (setq completion-category-defaults nil) (setq completion-category-overrides &amp;#39;((file (styles partial-completion))))) To persist history over Emacs restarts, vertico uses the savehist-mode that is built into emacs by default.</description><content>&lt;p>Trying out different completion frameworks for Emacs instead of simply Ivy, just for the heck of it.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">(use-package vertico
:straight &lt;span style="color:#66d9ef">t&lt;/span>
:init
(vertico-mode)
:config
(setq vertico-cycle &lt;span style="color:#66d9ef">t&lt;/span>))
(use-package vertico-buffer
:after vertico)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Also use the &lt;code>orderless&lt;/code> completion style to improve the completion methods for vertico/selectrum etc. This also allows using space as delimeter in vertico, since it reads space as a character to match otherwise.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">(use-package orderless
:straight &lt;span style="color:#66d9ef">t&lt;/span>
:init
(setq completion-styles &lt;span style="color:#f92672">&amp;#39;&lt;/span>(orderless))
(setq completion-category-defaults &lt;span style="color:#66d9ef">nil&lt;/span>)
(setq completion-category-overrides &lt;span style="color:#f92672">&amp;#39;&lt;/span>((file (styles partial-completion)))))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>To persist history over Emacs restarts, vertico uses the &lt;code>savehist-mode&lt;/code> that is built into emacs by default.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">(use-package savehist
:straight &lt;span style="color:#66d9ef">nil&lt;/span>
:init
(savehist-mode))
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="embark">&lt;!-- raw HTML omitted -->TODO&lt;!-- raw HTML omitted --> Embark&lt;/h2>
&lt;h2 id="marginalia">&lt;!-- raw HTML omitted -->TODO&lt;!-- raw HTML omitted --> Marginalia&lt;/h2>
&lt;p>Marginalia provides extra metadata depending on the context and type of object being actioned upon. This provides an &lt;code>ivy-rich&lt;/code> type interface for vertico.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">(use-package marginalia
:straight &lt;span style="color:#66d9ef">t&lt;/span>
:init
(marginalia-mode))
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="consult">&lt;!-- raw HTML omitted -->TODO&lt;!-- raw HTML omitted --> Consult&lt;/h2></content></item><item><title>Workspace setup ideas</title><link>https://chahak13.github.io/posts/workspace_setup_ideas/</link><pubDate>Sun, 11 Jul 2021 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/workspace_setup_ideas/</guid><description>Matthew Encina&amp;rsquo;s setup (2020, 2021)
Peg board for wires and other such accessories Shelf with doors to remove visible clutter Monitor arm mount for easier monitor use Felt foot-rest Desk mat for keyboard and mouse Notepad, not notebook David Zhang
Foot stool</description><content>&lt;p>Matthew Encina&amp;rsquo;s setup (&lt;a href="https://www.youtube.com/watch?v=QVEp781Welg">2020&lt;/a>, &lt;a href="https://www.youtube.com/watch?v=TvXhzI6qEgY">2021&lt;/a>)&lt;/p>
&lt;ol>
&lt;li>Peg board for wires and other such accessories&lt;/li>
&lt;li>Shelf with doors to remove visible clutter&lt;/li>
&lt;li>Monitor arm mount for easier monitor use&lt;/li>
&lt;li>Felt foot-rest&lt;/li>
&lt;li>Desk mat for keyboard and mouse&lt;/li>
&lt;li>Notepad, not notebook&lt;/li>
&lt;/ol>
&lt;p>David Zhang&lt;/p>
&lt;ol>
&lt;li>Foot stool&lt;/li>
&lt;/ol></content></item><item><title>How to create art from math</title><link>https://chahak13.github.io/posts/how_to_create_art_from_math/</link><pubDate>Sat, 26 Jun 2021 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/how_to_create_art_from_math/</guid><description>We&amp;rsquo;ll be using the numpy and matplotlib modules for this note. They provide the necessary mathematical and plotting tools required to start, for now.
import numpy as np import matplotlib.pyplot as plt # %matplotlib inline First, some auxiliary functions to setup figures using matplotlib.
def create_fig(facecolor=&amp;quot;#fee4a6&amp;quot;, **kwargs): fig, ax = plt.subplots(figsize=(7,7), **kwargs) ax.set_facecolor(facecolor) for spine in ax.spines.keys(): ax.spines[spine].set_color(facecolor) ax.set_xticks([]) ax.set_yticks([]) return fig, ax We want to see what happens when you provide mathematical transformations to seemingly simple set of points.</description><content>&lt;p>We&amp;rsquo;ll be using the &lt;code>numpy&lt;/code> and &lt;code>matplotlib&lt;/code> modules for this note. They provide the necessary mathematical and plotting tools required to start, for now.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-jupyter-python" data-lang="jupyter-python">import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline
&lt;/code>&lt;/pre>&lt;p>First, some auxiliary functions to setup figures using matplotlib.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-jupyter-python" data-lang="jupyter-python">def create_fig(facecolor=&amp;quot;#fee4a6&amp;quot;, **kwargs):
fig, ax = plt.subplots(figsize=(7,7), **kwargs)
ax.set_facecolor(facecolor)
for spine in ax.spines.keys():
ax.spines[spine].set_color(facecolor)
ax.set_xticks([])
ax.set_yticks([])
return fig, ax
&lt;/code>&lt;/pre>&lt;p>We want to see what happens when you provide mathematical transformations to seemingly simple set of points. To do so, let us start with a line.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-jupyter-python" data-lang="jupyter-python">x = np.pi
y = np.arange(-np.pi, np.pi, 0.1)
X, Y = np.meshgrid(x, y)
fig, ax = create_fig()
ax.scatter(X, Y, c='k', s=0.3)
fig.savefig(&amp;quot;./images/straight-line.png&amp;quot;)
&lt;/code>&lt;/pre>
&lt;figure class="left" >
&lt;img src="https://chahak13.github.io/ox-hugo/straight-line.png" />
&lt;/figure>
&lt;p>This is a simple vertical line on the cartesian plane. We will now see what happens when we apply a simple transformation using sine and cosine functions.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-jupyter-python" data-lang="jupyter-python">X_new = X + np.cos(Y)
Y_new = Y + np.sin(Y)**2
fig, ax = create_fig()
ax.scatter(X_new, Y_new, c='k', s=0.3)
fig.savefig(&amp;quot;./images/perturbed-line.png&amp;quot;)
&lt;/code>&lt;/pre>
&lt;figure class="left" >
&lt;img src="https://chahak13.github.io/ox-hugo/perturbed-line.png" />
&lt;/figure>
&lt;p>As we can see, a simple sinusoidal transformation is enough to give a straight line an interesting form. What if we do the same transformation on multiple such lines? We can do this by using a grid of points. We start out with a grid of points that we want to use to create &lt;em>something&lt;/em>. I italicized something because I don&amp;rsquo;t know what we will end up with.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-jupyter-python" data-lang="jupyter-python">x, y = np.arange(-np.pi, np.pi, 0.1), np.arange(-np.pi, np.pi, 0.1)
X, Y = np.meshgrid(x, y)
X_new = X + np.cos(Y)
Y_new = Y + np.sin(Y)**2
fig, ax = create_fig()
ax.scatter(X_new, Y_new, c='k', s=0.3)
fig.savefig(&amp;quot;./images/multiline-pattern.png&amp;quot;)
&lt;/code>&lt;/pre>
&lt;figure class="left" >
&lt;img src="https://chahak13.github.io/ox-hugo/multiline-pattern.png" />
&lt;/figure>
&lt;p>Heyy! That looks almost like a curtain flap. Fairly interesting, if someone was to ask me. All this is well and good. It&amp;rsquo;s simply plotting a function on the cartesian plane. We can also use a projection to the polar coordinate system to transform this pattern into a circular figure.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-jupyter-python" data-lang="jupyter-python">fig_p, ax_p = create_fig(facecolor=&amp;quot;#fee4a6&amp;quot;, **{&amp;quot;subplot_kw&amp;quot;: {&amp;quot;projection&amp;quot;: &amp;quot;polar&amp;quot;}})
ax_p.scatter(X_new, Y_new, c='k', s=0.3)
fig_p.savefig(&amp;quot;./images/multiline-pattern-polar.png&amp;quot;)
&lt;/code>&lt;/pre>
&lt;figure class="left" >
&lt;img src="https://chahak13.github.io/ox-hugo/multiline-pattern-polar.png" />
&lt;/figure>
&lt;p>Now, now, now! That&amp;rsquo;s some pretty looking pattern right here. I&amp;rsquo;d say just this pattern by itself is pretty good but we should also add some noise to it, just to see the effect of randomness. The most simple way of doing this is to mutiply a random number to each of the computed value. We can do this easily using the &lt;code>np.random&lt;/code> module of numpy.&lt;/p>
&lt;p>We will first see the effect it has in the cartesian system.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-jupyter-python" data-lang="jupyter-python">x, y = np.arange(-np.pi, np.pi, 0.1), np.arange(-np.pi, np.pi, 0.1)
X, Y = np.meshgrid(x, y)
rng = np.random.default_rng(seed=1)
X_new = X + rng.uniform(1, -1, Y.shape[0]) * np.cos(Y)
Y_new = Y + rng.uniform(1, -1, Y.shape[0]) * np.sin(Y)**2
fig, ax = create_fig()
ax.scatter(X_new, Y_new, c='k', s=0.3)
fig.savefig(&amp;quot;./images/multiline-random-cartesian.png&amp;quot;)
&lt;/code>&lt;/pre>
&lt;figure class="left" >
&lt;img src="https://chahak13.github.io/ox-hugo/multiline-random-cartesian.png" />
&lt;/figure>
&lt;p>Right, that looks almost like a nervous system or a cluster of wiring, depending on the viewers imagination - a la beauty lies in the eye of the &lt;a href="https://5e.tools/bestiary/beholder-mm.html">beholder&lt;/a>. I&amp;rsquo;m curious how this turns out in the polar coordinate system.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-jupyter-python" data-lang="jupyter-python">fig_p, ax_p = create_fig(facecolor=&amp;quot;#fee4a6&amp;quot;, **{&amp;quot;subplot_kw&amp;quot;: {&amp;quot;projection&amp;quot;: &amp;quot;polar&amp;quot;}})
ax_p.scatter(X_new, Y_new, c='k', s=0.3)
fig_p.savefig(&amp;quot;./images/multiline-random-polar.png&amp;quot;)
&lt;/code>&lt;/pre>
&lt;figure class="left" >
&lt;img src="https://chahak13.github.io/ox-hugo/multiline-random-polar.png" />
&lt;/figure>
&lt;p>&lt;em>Wow&lt;/em>. If the original polar coordinate plot was a beauty of a pattern, this one is a beauty of chaos. I can see so many things in this plot, I&amp;rsquo;m not even sure if I can list them. If anyone saw the link in the beholder word above, this definitely looks like some version of that to me. Or an insane web. I might go mad just by looking at it for long, trying to visualise stuff.&lt;/p>
&lt;p>Anyway, so this is the beginning of generating some curious generative art. Hopefully I&amp;rsquo;ll get to animating these too. It would be fun to some day reach the level of &lt;a href="https://github.com/aaronpenne/generative%5Fart">aaronpenne - A collection of my generative artwork, mostly with Processing in Python mod&lt;/a>e and &lt;a href="https://katharinabrunner.de/software-portfolio/">Generative Art – Katharina Brunner&lt;/a> but for now, ciao!&lt;/p></content></item><item><title>Change font size in emacs</title><link>https://chahak13.github.io/posts/change_font_size_in_emacs/</link><pubDate>Fri, 25 Jun 2021 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/change_font_size_in_emacs/</guid><description>Text in emacs can be scaled using &amp;lsquo;C-x C-+&amp;rsquo; or &amp;lsquo;C-x C-&amp;rsquo; to increase and &amp;lsquo;C-x C--&amp;rsquo; to decrease. C-x C-0 can be used to bring it back to the default size.</description><content>&lt;p>Text in emacs can be scaled using &amp;lsquo;&lt;code>C-x C-+&lt;/code>&amp;rsquo; or &amp;lsquo;&lt;code>C-x C-&lt;/code>&amp;rsquo; to increase and &amp;lsquo;&lt;code>C-x C--&lt;/code>&amp;rsquo; to decrease. &lt;code>C-x C-0&lt;/code> can be used to bring it back to the default size.&lt;/p></content></item><item><title>On and Off Campus Employment</title><link>https://chahak13.github.io/posts/on_and_off_campus_employment/</link><pubDate>Wed, 23 Jun 2021 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/on_and_off_campus_employment/</guid><description>During studies On-campus Employment Any employment paid by uni or through approved vendor. Need to maintain F-1 status No authorization needed Can work upto 20 hrs/week during academic semesters Beyond 20 in breaks Need process done with ISSS for SSN CPT Beyond 20hours a week on campus / Any paid off campus
must be enrolled in US for 2 semesters
Job with determined dates</description><content>&lt;h2 id="during-studies">During studies&lt;/h2>
&lt;h3 id="on-campus-employment">On-campus Employment&lt;/h3>
&lt;ul>
&lt;li>Any employment paid by uni or through approved vendor.&lt;/li>
&lt;li>Need to maintain F-1 status&lt;/li>
&lt;li>No authorization needed&lt;/li>
&lt;li>Can work upto 20 hrs/week during academic semesters&lt;/li>
&lt;li>Beyond 20 in breaks&lt;/li>
&lt;li>Need process done with ISSS for SSN&lt;/li>
&lt;/ul>
&lt;h3 id="cpt">CPT&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Beyond 20hours a week on campus / Any paid off campus&lt;/p>
&lt;/li>
&lt;li>
&lt;p>must be enrolled in US for 2 semesters&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Job with determined dates&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Related to your major&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Should receive course credit or required to complete the degree OR required to complete thesis/report&lt;/p>
&lt;/li>
&lt;li>
&lt;p>any changes in employer, position or dates, would need new authorization&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Part-time (&amp;lt;20/wk) is unlimited&lt;/p>
&lt;/li>
&lt;li>
&lt;blockquote>
&lt;p>12 months of full-time makes inelligible for OPT&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>unauthorized employment&lt;/strong> will lead to termination of f1.&lt;/p>
&lt;ul>
&lt;li>work beyond or prior to authorization&lt;/li>
&lt;li>no course credit earned (if through course enrollment)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Employer needs to provide job offer letter&lt;/p>
&lt;/li>
&lt;li>
&lt;p>advisor should sign off on application and confirm it is related to my major&lt;/p>
&lt;/li>
&lt;li>
&lt;p>CPT for course credit - if during fall/spring, take it in the semester of internship. If during summer, take during either summer semester or succeeding fall semester.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="opt">OPT&lt;/h3>
&lt;ul>
&lt;li>OPT is employment related to the student&amp;rsquo;s field of study but not integral or required for studies.&lt;/li>
&lt;li>Must be enrolled for 2 reg sems&lt;/li>
&lt;li>No job offer required&lt;/li>
&lt;li>Directly related to major&lt;/li>
&lt;li>Pre-completion will subtract time from Post-completion OPT.
&lt;ul>
&lt;li>Part-time subtracts 2:1&lt;/li>
&lt;li>Full time subtracts 1:1&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Can take 3-4 months to approve since done by USCIS&lt;/li>
&lt;li>Will receive EAD to work&lt;/li>
&lt;/ul>
&lt;h3 id="after-studies">After studies&lt;/h3>
&lt;h4 id="post-completion-opt">Post Completion OPT&lt;/h4>
&lt;ul>
&lt;li>No job offer required&lt;/li>
&lt;li>Directly related to major&lt;/li>
&lt;li>Can apply within 90 days of graduating&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>
&lt;p>Application Process&lt;/p>
&lt;ol>
&lt;li>Check eligibility with ISSS&lt;/li>
&lt;li>Can&amp;rsquo;t apply earlier than 90 days of graduating and 60 days after graduating&lt;/li>
&lt;li>Apply through myIO/I-20 issued&lt;/li>
&lt;li>Send application to USCIS&lt;/li>
&lt;li>Add info to SEVP portal&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>
&lt;p>STEM OPT Extension&lt;/p>
&lt;p>24-month extension if&lt;/p>
&lt;ul>
&lt;li>Received STEM degree&lt;/li>
&lt;li>Currently working on initial 12-month of OPT&lt;/li>
&lt;li>Are working for US company registered with E-Verify employment verification system.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="how-to-get-course-credit-for-cpt">How to get course-credit for CPT&lt;/h2>
&lt;p>At the time of applying for CPT, we have to tick a box that says &amp;ldquo;I&amp;rsquo;ll be using course credit&amp;rdquo; and the dept will let ISSS know the course that we will be expected to choose.&lt;/p>
&lt;h2 id="is-freelancing-legal">Is freelancing legal?&lt;/h2>
&lt;p>&lt;strong>NO&lt;/strong>. Needs CPT authorization and related to major.&lt;/p>
&lt;h2 id="can-show-max-90-days-of-unemployment-after-ead-arrives">Can show max 90 days of unemployment after EAD arrives&lt;/h2></content></item><item><title>Chunky Pandas - Read CSV in chunks</title><link>https://chahak13.github.io/posts/chunky_pandas_read_csv_in_chunks/</link><pubDate>Fri, 11 Jun 2021 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/chunky_pandas_read_csv_in_chunks/</guid><description>Huge CSV files are a pain to read as they start overloading RAM a lot. The read_csv function provides the ability to read a file in chunks. This is potentially helpful to perform operations on such large files in parts. I&amp;rsquo;d like to look more into what all can be done using chunking.</description><content>&lt;p>Huge CSV files are a pain to read as they start overloading RAM a lot. The &lt;code>read_csv&lt;/code> function provides the ability to read a file in chunks. This is potentially helpful to perform operations on such large files in parts. I&amp;rsquo;d like to look more into what all can be done using chunking.&lt;/p></content></item><item><title>Sir Alex Ferguson - Never Give In</title><link>https://chahak13.github.io/posts/sir_alex_ferguson_never_give_in/</link><pubDate>Wed, 09 Jun 2021 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/sir_alex_ferguson_never_give_in/</guid><description> Memories are what makes a person
Never giving in. That&amp;rsquo;s what makes the biggest things happen.</description><content>&lt;blockquote>
&lt;p>&lt;em>Memories are what makes a person&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>&lt;em>Never giving in. That&amp;rsquo;s what makes the biggest things happen.&lt;/em>&lt;/p>
&lt;/blockquote></content></item><item><title>Maintaining F-1/J-1 student status (UT Austin seminar)</title><link>https://chahak13.github.io/posts/maintaining_f_1_j_1_student_status_ut_austin_seminar/</link><pubDate>Thu, 03 Jun 2021 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/maintaining_f_1_j_1_student_status_ut_austin_seminar/</guid><description>Maintaining Status Enroll full-time for each Fall and Spring semester: Graduate: 9 hours Make normal progress towards the degree Passport should not expire I-20 should be accurate and valid at all times Grace period after end of program: F1: 60 days Enrollment during Covid You may not enter US if you plan to enroll to all online classes If in US, should enroll in at-least one in-person course Austin plans to hold most courses in person Online semesters do not count towards fulfilling two semester requirement for CPT/OPT Employment Can work on-campus Up to 30 days before start of classes Maximum of 20 hours/week (Fall and Spring sems) DON&amp;rsquo;T work without proper authorization.</description><content>&lt;h2 id="maintaining-status">Maintaining Status&lt;/h2>
&lt;ul>
&lt;li>Enroll full-time for each Fall and Spring semester:
&lt;ul>
&lt;li>Graduate: 9 hours&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Make normal progress towards the degree&lt;/li>
&lt;li>Passport should not expire&lt;/li>
&lt;li>I-20 should be accurate and valid at all times&lt;/li>
&lt;li>Grace period after end of program:
&lt;ul>
&lt;li>F1: 60 days&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="enrollment-during-covid">Enrollment during Covid&lt;/h3>
&lt;ul>
&lt;li>You may not enter US if you plan to enroll to all online classes&lt;/li>
&lt;li>If in US, should enroll in at-least one in-person course&lt;/li>
&lt;li>Austin plans to hold most courses in person&lt;/li>
&lt;li>Online semesters do not count towards fulfilling two semester requirement for CPT/OPT&lt;/li>
&lt;/ul>
&lt;h3 id="employment">Employment&lt;/h3>
&lt;ul>
&lt;li>Can work on-campus
&lt;ul>
&lt;li>Up to &lt;strong>30 days&lt;/strong> before start of classes&lt;/li>
&lt;li>&lt;strong>Maximum&lt;/strong> of &lt;strong>20 hours/week&lt;/strong> (Fall and Spring sems)&lt;/li>
&lt;li>&lt;strong>DON&amp;rsquo;T&lt;/strong> work without proper authorization. Reach out to ISSS before off-campus work&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="myio">myIO&lt;/h3>
&lt;ul>
&lt;li>Complete all required forms in myIO to finish Check-in process&lt;/li>
&lt;li>After registration of classes, ISSS will update that status&lt;/li>
&lt;/ul>
&lt;h3 id="changing-addresses">Changing Addresses&lt;/h3>
&lt;ul>
&lt;li>Update to local address in MyUT within &lt;strong>10 days&lt;/strong> of arrival or change.&lt;/li>
&lt;li>&lt;a href="http://my.utexas.edu">http://my.utexas.edu&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="travel-reminders">Travel Reminders&lt;/h2>
&lt;ul>
&lt;li>Documents to be kept at all times:
&lt;ul>
&lt;li>Valid I-20 signed within a year&lt;/li>
&lt;li>Valid Passport and visa&lt;/li>
&lt;li>Proof of enrollment and funding&lt;/li>
&lt;li>SEVIS fee receipt&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Carry all original docs when leaving Austin, especially within 100 miles of international border&lt;/li>
&lt;li>Cannot re-enter during grace period&lt;/li>
&lt;/ul>
&lt;h2 id="q-and-a">Q&amp;amp;A&lt;/h2>
&lt;ol>
&lt;li>COVID Vaccine requirements?
None really, as of now. Students at UT have an option to get it&lt;/li>
&lt;li>I-20 signatures?
Please sign bottom of page 1 with blue pen. Sign and Date&lt;/li>
&lt;li>Wait-time for I-20s?
A bit hard to say, but if waiting for &amp;gt;2 weeks, please reach out to the office.&lt;/li>
&lt;li>Travel signature on I-20?
On pg 2 of I-20, there will be a travel signature from the ISSS office. While student, travel sign is valid for 12 months. If sign is older than a year, request for a new sign if you have any travel plans.&lt;/li>
&lt;li>When can students enter?
Earliest is 30 days prior to program start date on I-20&lt;/li>
&lt;li>Does UT require full vaccination for in-person classes?
Not right now, no. Vaccines are available for students when they arrive.&lt;/li>
&lt;li>What are off-campus employment options as F-1 student?
A seminar on this very thing next week. Main option is CPT.&lt;/li>
&lt;/ol></content></item><item><title>Fetching emails - mbsync</title><link>https://chahak13.github.io/posts/fetching_emails_mbsync/</link><pubDate>Sun, 30 May 2021 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/fetching_emails_mbsync/</guid><description/><content/></item><item><title>Mail in emacs - mu4e</title><link>https://chahak13.github.io/posts/mail_in_emacs_mu4e/</link><pubDate>Sun, 30 May 2021 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/mail_in_emacs_mu4e/</guid><description>mu4e (mu-for-emacs) is an e-mail client for GNU Emacs version 24.4 or higher, built on top of the mu(1) e-mail search engine. mu4e is optimized for quickly processing large amounts of e-mail.
As taken from the manual, mu4e is an email interface for emacs. It is strictly an interface and doesn&amp;rsquo;t communicate with the email provider for getting mails. This part is delegated to other things like mbsync, offlineimap etc.</description><content>&lt;blockquote>
&lt;p>mu4e (mu-for-emacs) is an e-mail client for GNU Emacs version 24.4 or
higher, built on top of the mu(1) e-mail search engine. mu4e is
optimized for quickly processing large amounts of e-mail.&lt;/p>
&lt;/blockquote>
&lt;p>As taken from the manual, mu4e is an email interface for emacs. It is strictly an interface and doesn&amp;rsquo;t communicate with the email provider for getting mails. This part is delegated to other things like &lt;code>mbsync&lt;/code>, &lt;code>offlineimap&lt;/code> etc. I use &lt;a href="https://chahak13.github.io/posts/fetching_emails_mbsync/">Fetching emails - mbsync&lt;/a> for getting my mail periodically from gmail.&lt;/p>
&lt;h2 id="installation">Installation&lt;/h2>
&lt;p>mu4e comes along with the &lt;code>mu&lt;/code> utility that can be downloaded directly from the OS&amp;rsquo;s package manager. For Arch, this can be done via the AUR&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">paru -S mu
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This installs the &lt;code>mu&lt;/code> indexer and its mu4e interface for emacs.&lt;/p>
&lt;h2 id="configuration">Configuration&lt;/h2>
&lt;p>First thing to use mu4e is to load it into emacs. Since mu4e is installed via the package manager, it needs to be loaded into emacs. This can be done via the &lt;code>load-path&lt;/code> directive in use-package.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">(use-package mu4e
:load-path &lt;span style="color:#e6db74">&amp;#34;/usr/share/emacs/site-lisp/mu4e&amp;#34;&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will load mu4e into emacs. We now need to configure mu4e to look at the right paths for loading all the emails. The first variable that we need to set is the mail directory where mu4e will look for mails.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">(setq mu4e-maildir &lt;span style="color:#e6db74">&amp;#34;~/Mail&amp;#34;&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now that mu4e knows where to look for all emails, we can start configuring other variables for our liking.&lt;/p>
&lt;h3 id="retrieval-and-indexing-mails">Retrieval and indexing mails&lt;/h3>
&lt;p>An important thing to note is that mu4e doesn&amp;rsquo;t retrieve emails from the provider itself but it can call other utilities periodically to do so. This can be done by setting the following to variables.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">(setq mu4e-get-mail-command &lt;span style="color:#e6db74">&amp;#34;mbsync -a&amp;#34;&lt;/span>)
(setq mu4e-update-interval (&lt;span style="color:#a6e22e">*&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#ae81ff">60&lt;/span>))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Using these variables, mu4e uses the shell command set in the &lt;code>mu4e-get-mail-command&lt;/code> variable every &lt;code>mu4e-update-interval&lt;/code> seconds, which is set to 10 mins here. This can be changed as per requirement. To improve the indexing performace, I set the the &lt;code>mu4e-index-lazy-check&lt;/code> variable to &lt;code>t&lt;/code>. This variable tells the mu indexer to not update index for directories whose last modified time is not after the previous indexing. While this doesn&amp;rsquo;t take into consideration changing/updating of messages, it handles addition and removal of messages. Since most of my operations don&amp;rsquo;t involve changing emails in place, I&amp;rsquo;m going to try and use this to see how it affects my flow.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">(setq mu4e-index-lazy-check &lt;span style="color:#66d9ef">t&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="contexts">Contexts&lt;/h3>
&lt;p>Contexts provide the useful ability to switch between various email accounts, based on the right context, or manually. Using this, we can dynamically switch between folders of different email accounts. An &lt;code>mu4e-context&lt;/code> is a Lisp object with a few useful members:&lt;/p>
&lt;ul>
&lt;li>&lt;code>name&lt;/code>: The name of the context. e.g. work or private&lt;/li>
&lt;li>&lt;code>vars&lt;/code>: An association-list of variable settings for this account.&lt;/li>
&lt;li>&lt;code>match-func&lt;/code>: A function that takes a MSG message plist as argument and returns non-nil if this context matches the situation. mu4e uses the first context that matches.&lt;/li>
&lt;/ul>
&lt;p>We can use these variables to set contexts in mu4e as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">(setq mu4e-contexts
(&lt;span style="color:#a6e22e">list&lt;/span>
(make-mu4e-context
:name &lt;span style="color:#e6db74">&amp;#34;Private&amp;#34;&lt;/span>
:match-func (lambda (msg)
(when msg
(string-prefix-p &lt;span style="color:#e6db74">&amp;#34;/chahakcr7&amp;#34;&lt;/span> (mu4e-message-field msg :maildir))))
:vars
&lt;span style="color:#f92672">&amp;#39;&lt;/span>(
(user-mail-address &lt;span style="color:#f92672">.&lt;/span> &lt;span style="color:#e6db74">&amp;#34;chahakcr7@gmail.com&amp;#34;&lt;/span>)
(&lt;span style="color:#a6e22e">user-full-name&lt;/span> &lt;span style="color:#f92672">.&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Chahak&amp;#34;&lt;/span>)
(mu4e-drafts-folder &lt;span style="color:#f92672">.&lt;/span> &lt;span style="color:#e6db74">&amp;#34;/chahakcr7/[Gmail]/Drafts&amp;#34;&lt;/span>)
(mu4e-sent-folder &lt;span style="color:#f92672">.&lt;/span> &lt;span style="color:#e6db74">&amp;#34;/chahakcr7/[Gmail]/Sent Mail&amp;#34;&lt;/span>)
(mu4e-refile-folder &lt;span style="color:#f92672">.&lt;/span> &lt;span style="color:#e6db74">&amp;#34;/chahakcr7/[Gmail]/All Mail&amp;#34;&lt;/span>)
(mu4e-trash-folder &lt;span style="color:#f92672">.&lt;/span> &lt;span style="color:#e6db74">&amp;#34;/chahakcr7/[Gmail]/Trash&amp;#34;&lt;/span>)
))
&lt;span style="color:#75715e">;; Official Email&lt;/span>
(make-mu4e-context
:name &lt;span style="color:#e6db74">&amp;#34;Official&amp;#34;&lt;/span>
:match-func (lambda (msg)
(when msg
(string-prefix-p &lt;span style="color:#e6db74">&amp;#34;/chahakmehta013&amp;#34;&lt;/span> (mu4e-message-field msg :maildir))))
:vars
&lt;span style="color:#f92672">&amp;#39;&lt;/span>(
(user-mail-address &lt;span style="color:#f92672">.&lt;/span> &lt;span style="color:#e6db74">&amp;#34;chahak.mehta013@gmail.com&amp;#34;&lt;/span>)
(&lt;span style="color:#a6e22e">user-full-name&lt;/span> &lt;span style="color:#f92672">.&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Chahak Mehta&amp;#34;&lt;/span>)
(mu4e-drafts-folder &lt;span style="color:#f92672">.&lt;/span> &lt;span style="color:#e6db74">&amp;#34;/chahakmehta013/[Gmail]/Drafts&amp;#34;&lt;/span>)
(mu4e-sent-folder &lt;span style="color:#f92672">.&lt;/span> &lt;span style="color:#e6db74">&amp;#34;/chahakmehta013/[Gmail]/Sent Mail&amp;#34;&lt;/span>)
(mu4e-refile-folder &lt;span style="color:#f92672">.&lt;/span> &lt;span style="color:#e6db74">&amp;#34;/chahakmehta013/[Gmail]/All Mail&amp;#34;&lt;/span>)
(mu4e-trash-folder &lt;span style="color:#f92672">.&lt;/span> &lt;span style="color:#e6db74">&amp;#34;/chahakmehta013/[Gmail]/Trash&amp;#34;&lt;/span>)
))
&lt;span style="color:#75715e">;; UT Austin email&lt;/span>
(make-mu4e-context
:name &lt;span style="color:#e6db74">&amp;#34;UT Austin&amp;#34;&lt;/span>
:match-func (lambda (msg)
(when msg
(string-prefix-p &lt;span style="color:#e6db74">&amp;#34;/chahakut&amp;#34;&lt;/span> (mu4e-message-field msg :maildir))))
:vars
&lt;span style="color:#f92672">&amp;#39;&lt;/span>(
(user-mail-address &lt;span style="color:#f92672">.&lt;/span> &lt;span style="color:#e6db74">&amp;#34;chahak@utexas.edu&amp;#34;&lt;/span>)
(&lt;span style="color:#a6e22e">user-full-name&lt;/span> &lt;span style="color:#f92672">.&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Chahak Mehta&amp;#34;&lt;/span>)
(mu4e-drafts-folder &lt;span style="color:#f92672">.&lt;/span> &lt;span style="color:#e6db74">&amp;#34;/chahakut/[Gmail]/Drafts&amp;#34;&lt;/span>)
(mu4e-sent-folder &lt;span style="color:#f92672">.&lt;/span> &lt;span style="color:#e6db74">&amp;#34;/chahakut/[Gmail]/Sent Mail&amp;#34;&lt;/span>)
(mu4e-refile-folder &lt;span style="color:#f92672">.&lt;/span> &lt;span style="color:#e6db74">&amp;#34;/chahakut/[Gmail]/All Mail&amp;#34;&lt;/span>)
(mu4e-trash-folder &lt;span style="color:#f92672">.&lt;/span> &lt;span style="color:#e6db74">&amp;#34;/chahakut/[Gmail]/Trash&amp;#34;&lt;/span>)
))))
&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>Monte Carlo integration - Wikipedia</title><link>https://chahak13.github.io/posts/monte_carlo_integration_wikipedia/</link><pubDate>Fri, 14 May 2021 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/monte_carlo_integration_wikipedia/</guid><description>Monte Carlo Integration is a technique for numerical integration using random numbers. It is a type of Monte Carlo methods that can be used to numerically compute a definite integral. The main differing point of such integration is that while standard methods use a regular interval to evaluate the integrand, Monte Carlo uses a random set of points to evaluate. This method is particularly useful for higher-dimensional integrals. There are various methods to perform such an integration: Uniform sampling, stratified sampling, importance sampling, sequential Monte Carlo, and mean field particle methods.</description><content>&lt;p>Monte Carlo Integration is a technique for numerical integration using random numbers. It is a type of Monte Carlo methods that can be used to numerically compute a definite integral. The main differing point of such integration is that while standard methods use a regular interval to evaluate the integrand, Monte Carlo uses a random set of points to evaluate. This method is particularly useful for higher-dimensional integrals. There are various methods to perform such an integration: Uniform sampling, stratified sampling, importance sampling, sequential Monte Carlo, and mean field particle methods. We&amp;rsquo;ll be taking a look at the uniform sampling, and importance sampling methods in brief.&lt;/p>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>At the core of it, Monte Carlo is an approximation method used to approximate the value of the integral as compared to the deterministic approach of methods like the &lt;a href="https://chahak13.github.io/posts/trapezoidal_rule/">trapezoidal-rule&lt;/a>. Each simulation of a monte carlo integral provides a different outcome, which can be averaged over multiple simulations.&lt;/p>
&lt;p>Let I be a multidimensional definite integral defined as&lt;/p>
&lt;p>\[
I=\int_{a}^{b}f(x)dx
\]&lt;/p>
&lt;p>and a random variable \(X_i ~ p(x)\) where \(p(x)\) must be nonzero for all \(x\) where \(f(x)\) is nonzero. Then, the Monte Carlo estimator is defined as&lt;/p>
&lt;p>\[
F_{N} = \frac{1}{N}\sum_{i=1}^{N}\frac{f(X_i)}{p(X_i)}
\]&lt;/p>
&lt;p>The value of \(I\) can be estimated by taking an average of several such Monte Carlo estimator values.&lt;/p>
&lt;h2 id="basic-monte-carlo-estimator">Basic Monte Carlo Estimator&lt;/h2>
&lt;p>The basic monte carlo estimator is a special case of Importance Sampling Estimator case where we sample the points from a uniform random variable, to calculate the integral. Therefore, \(X_i ~ p(x) = c\). This follows that for interval \((a, b)\), the value of \(c = \frac{1}{b-a}\). Therefore, the Monte Carlo estimator then becomes&lt;/p>
&lt;p>We can also extend this to be N-Dimensional. For example, a 3D basic estimator for an integral&lt;/p>
&lt;p>would be defined as&lt;/p>
&lt;p>Therefore, a general rule can be written as follows. For an n-dimensional integral&lt;/p>
&lt;p>the MC Estimator is defined as&lt;/p>
&lt;p>where \(N\) is the number of samples that are taken from the uniform distribution for evaluation.&lt;/p>
&lt;h3 id="simulation">Simulation&lt;/h3>
&lt;p>This method can be simulated fairly easily using python. Let us try and integrate the following function for \(0.8 &amp;lt; x &amp;lt; 3\)&lt;/p>
&lt;p>To do this, we&amp;rsquo;ll first have to define a python function using numpy&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python"> &lt;span style="color:#f92672">import&lt;/span> numpy &lt;span style="color:#66d9ef">as&lt;/span> np
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">f&lt;/span>(x):
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">/&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">+&lt;/span>np&lt;span style="color:#f92672">.&lt;/span>sinh(&lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">*&lt;/span>x)&lt;span style="color:#f92672">*&lt;/span>np&lt;span style="color:#f92672">.&lt;/span>log(x)&lt;span style="color:#f92672">**&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now that we have a function that calculates the value of \(f(x)\) at a given set of points, let us start with the MC estimator. First we will define the limits of the integral \((a, b)\) and the number of estimators \(N\). We will also define the number of points that are sampled.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python"> n_estimators &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>
N &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>
a, b &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0.8&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, we need to perform the calculation for each MC estimator and find the average. We can do this more efficiently by using numpy&amp;rsquo;s vector operations and random number generator.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python"> rng &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>random&lt;span style="color:#f92672">.&lt;/span>default_rng()
r &lt;span style="color:#f92672">=&lt;/span> rng&lt;span style="color:#f92672">.&lt;/span>uniform(a, b, size&lt;span style="color:#f92672">=&lt;/span>(n_estimators, N))
result &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">/&lt;/span>n_estimators)&lt;span style="color:#f92672">*&lt;/span>((b&lt;span style="color:#f92672">-&lt;/span>a)&lt;span style="color:#f92672">/&lt;/span>N)&lt;span style="color:#f92672">*&lt;/span>(np&lt;span style="color:#f92672">.&lt;/span>sum(f(r)))
result
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">0.6786189790691812
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can check this result by comparing it with the function &lt;code>scipy.integrate.quad&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python"> &lt;span style="color:#f92672">from&lt;/span> scipy &lt;span style="color:#f92672">import&lt;/span> integrate
integrate&lt;span style="color:#f92672">.&lt;/span>quad(f, a, b)[&lt;span style="color:#ae81ff">0&lt;/span>]
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">0.6768400757156462
&lt;/code>&lt;/pre>&lt;/div>&lt;p>As we can see, the two results are fairly similar. Do note that the result due to MC estimators is bound to change but it is still a fairly close estimate to the integration function from scipy.&lt;/p>
&lt;h2 id="importance-sampling">Importance Sampling&lt;/h2>
&lt;p>The formula for a MC estimator that we saw above was for an importance sampling estimator. What it means is that, instead of choosing random points over an interval with uniform probability, we try to sample points based on its expected contribution to the integral. This means that instead of a uniform distribution, we use a distribution \(p(x)\) of our choice that we hope makes the calculation more efficient. The intuition behind this is that if a particular point \(x_i\) is picked up with a higher probability, then we weigh it down by a factor of its probability \(p(x_i)\).&lt;/p></content></item><item><title>aaronpenne/generative_art: A collection of my generative artwork, mostly with Processing in Python mode</title><link>https://chahak13.github.io/posts/aaronpenne_generative_art_a_collection_of_my_generative_artwork_mostly_with_processing_in_python_mode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/aaronpenne_generative_art_a_collection_of_my_generative_artwork_mostly_with_processing_in_python_mode/</guid><description>//</description><content>&lt;p>//&lt;/p></content></item><item><title>Advent of Code '21</title><link>https://chahak13.github.io/posts/advent_of_code_21/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/advent_of_code_21/</guid><description>Day 1: Sonar Sweep Part 1 Problem You&amp;rsquo;re minding your own business on a ship at sea when the overboard alarm goes off! You rush to see if you can help. Apparently, one of the Elves tripped and accidentally sent the sleigh keys flying into the ocean!
Before you know it, you&amp;rsquo;re inside a submarine the Elves keep ready for situations like this. It&amp;rsquo;s covered in Christmas lights (because of course it is), and it even has an experimental antenna that should be able to track the keys if you can boost its signal strength high enough; there&amp;rsquo;s a little meter that indicates the antenna&amp;rsquo;s signal strength by displaying 0-50 stars.</description><content>&lt;h2 id="day-1-sonar-sweep">&lt;a href="https://adventofcode.com/2021/day/1">Day 1: Sonar Sweep&lt;/a>&lt;/h2>
&lt;h3 id="part-1">Part 1&lt;/h3>
&lt;h4 id="problem">Problem&lt;/h4>
&lt;p>You&amp;rsquo;re minding your own business on a ship at sea when the overboard alarm goes off! You rush to see if you can help. Apparently, one of the Elves tripped and accidentally sent the sleigh keys flying into the ocean!&lt;/p>
&lt;p>Before you know it, you&amp;rsquo;re inside a submarine the Elves keep ready for situations like this. It&amp;rsquo;s covered in Christmas lights (because of course it is), and it even has an experimental antenna that should be able to track the keys if you can boost its signal strength high enough; there&amp;rsquo;s a little meter that indicates the antenna&amp;rsquo;s signal strength by displaying 0-50 stars.&lt;/p>
&lt;p>Your instincts tell you that in order to save Christmas, you&amp;rsquo;ll need to get all fifty stars by December 25th.&lt;/p>
&lt;p>Collect stars by solving puzzles. Two puzzles will be made available on each day in the Advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants one star. Good luck!&lt;/p>
&lt;p>As the submarine drops below the surface of the ocean, it automatically performs a sonar sweep of the nearby sea floor. On a small screen, the sonar sweep report (your puzzle input) appears: each line is a measurement of the sea floor depth as the sweep looks further and further away from the submarine.&lt;/p>
&lt;p>For example, suppose you had the following report:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">199
200
208
210
200
207
240
269
260
263
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This report indicates that, scanning outward from the submarine, the sonar sweep found depths of 199, 200, 208, 210, and so on.&lt;/p>
&lt;p>The first order of business is to figure out how quickly the depth increases, just so you know what you&amp;rsquo;re dealing with - you never know if the keys will get carried into deeper water by an ocean current or a fish or something.&lt;/p>
&lt;p>To do this, count the number of times a depth measurement increases from the previous measurement. (There is no measurement before the first measurement.) In the example above, the changes are as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">199 (N/A - no previous measurement)
200 (increased)
208 (increased)
210 (increased)
200 (decreased)
207 (increased)
240 (increased)
269 (increased)
260 (decreased)
263 (increased)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this example, there are 7 measurements that are larger than the previous measurement.&lt;/p>
&lt;p>How many measurements are larger than the previous measurement?&lt;/p>
&lt;h4 id="solution">Solution&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">count &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;span style="color:#66d9ef">with&lt;/span> open(&lt;span style="color:#e6db74">&amp;#34;/Users/cmehta/Documents/advent_of_code/inputs/1_solar_sweep.csv&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;r&amp;#34;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> f:
lines &lt;span style="color:#f92672">=&lt;/span> f&lt;span style="color:#f92672">.&lt;/span>readlines()
previous_val &lt;span style="color:#f92672">=&lt;/span> int(lines[&lt;span style="color:#ae81ff">0&lt;/span>]&lt;span style="color:#f92672">.&lt;/span>strip())
&lt;span style="color:#66d9ef">for&lt;/span> line &lt;span style="color:#f92672">in&lt;/span> lines:
number &lt;span style="color:#f92672">=&lt;/span> int(line&lt;span style="color:#f92672">.&lt;/span>strip())
&lt;span style="color:#66d9ef">if&lt;/span> number &lt;span style="color:#f92672">&amp;gt;&lt;/span> previous_val:
count &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
previous_val &lt;span style="color:#f92672">=&lt;/span> number
print(count)
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">1583
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="part-2">Part 2&lt;/h3>
&lt;h4 id="problem">Problem&lt;/h4>
&lt;p>Considering every single measurement isn&amp;rsquo;t as useful as you expected: there&amp;rsquo;s just too much noise in the data.&lt;/p>
&lt;p>Instead, consider sums of a three-measurement sliding window. Again considering the above example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">199 A
200 A B
208 A B C
210 B C D
200 E C D
207 E F D
240 E F G
269 F G H
260 G H
263 H
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Start by comparing the first and second three-measurement windows. The measurements in the first window are marked A (199, 200, 208); their sum is 199 + 200 + 208 = 607. The second window is marked B (200, 208, 210); its sum is 618. The sum of measurements in the second window is larger than the sum of the first, so this first comparison increased.&lt;/p>
&lt;p>Your goal now is to count the number of times the sum of measurements in this sliding window increases from the previous sum. So, compare A with B, then compare B with C, then C with D, and so on. Stop when there aren&amp;rsquo;t enough measurements left to create a new three-measurement sum.&lt;/p>
&lt;p>In the above example, the sum of each three-measurement window is as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">A: 607 (N/A - no previous sum)
B: 618 (increased)
C: 618 (no change)
D: 617 (decreased)
E: 647 (increased)
F: 716 (increased)
G: 769 (increased)
H: 792 (increased)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this example, there are 5 sums that are larger than the previous sum.&lt;/p>
&lt;p>Consider sums of a three-measurement sliding window. How many sums are larger than the previous sum?&lt;/p>
&lt;h4 id="solution">Solution&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">count &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;span style="color:#66d9ef">with&lt;/span> open(&lt;span style="color:#e6db74">&amp;#34;/Users/cmehta/Documents/advent_of_code/inputs/1_solar_sweep.csv&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;r&amp;#34;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> f:
lines &lt;span style="color:#f92672">=&lt;/span> f&lt;span style="color:#f92672">.&lt;/span>readlines()
previous_sum &lt;span style="color:#f92672">=&lt;/span> int(lines[&lt;span style="color:#ae81ff">0&lt;/span>]&lt;span style="color:#f92672">.&lt;/span>strip()) &lt;span style="color:#f92672">+&lt;/span> int(lines[&lt;span style="color:#ae81ff">1&lt;/span>]&lt;span style="color:#f92672">.&lt;/span>strip()) &lt;span style="color:#f92672">+&lt;/span> int(lines[&lt;span style="color:#ae81ff">2&lt;/span>]&lt;span style="color:#f92672">.&lt;/span>strip())
&lt;span style="color:#66d9ef">for&lt;/span> i, line &lt;span style="color:#f92672">in&lt;/span> enumerate(lines[:&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>]):
number &lt;span style="color:#f92672">=&lt;/span> int(line&lt;span style="color:#f92672">.&lt;/span>strip()) &lt;span style="color:#f92672">+&lt;/span> int(lines[i&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]&lt;span style="color:#f92672">.&lt;/span>strip()) &lt;span style="color:#f92672">+&lt;/span> int(lines[i&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>]&lt;span style="color:#f92672">.&lt;/span>strip())
&lt;span style="color:#66d9ef">if&lt;/span> number &lt;span style="color:#f92672">&amp;gt;&lt;/span> previous_sum:
count &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
previous_sum &lt;span style="color:#f92672">=&lt;/span> number
print(count)
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">1627
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="day-2-dive">&lt;a href="https://adventofcode.com/2021/day/2">Day 2: Dive!&lt;/a>&lt;/h2>
&lt;h3 id="problem">Problem&lt;/h3>
&lt;p>Now, you need to figure out how to pilot this thing.&lt;/p>
&lt;p>It seems like the submarine can take a series of commands like forward 1, down 2, or up 3:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text"> forward X increases the horizontal position by X units.
down X increases the depth by X units.
up X decreases the depth by X units.
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that since you&amp;rsquo;re on a submarine, down and up affect your depth, and so they have the opposite result of what you might expect.&lt;/p>
&lt;p>The submarine seems to already have a planned course (your puzzle input). You should probably figure out where it&amp;rsquo;s going. For example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">forward 5
down 5
forward 8
up 3
down 8
forward 2
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Your horizontal position and depth both start at 0. The steps above would then modify them as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text"> forward 5 adds 5 to your horizontal position, a total of 5.
down 5 adds 5 to your depth, resulting in a value of 5.
forward 8 adds 8 to your horizontal position, a total of 13.
up 3 decreases your depth by 3, resulting in a value of 2.
down 8 adds 8 to your depth, resulting in a value of 10.
forward 2 adds 2 to your horizontal position, a total of 15.
&lt;/code>&lt;/pre>&lt;/div>&lt;p>After following these instructions, you would have a horizontal position of 15 and a depth of 10. (Multiplying these together produces 150.)&lt;/p>
&lt;p>Calculate the horizontal position and depth you would have after following the planned course. What do you get if you multiply your final horizontal position by your final depth?&lt;/p>
&lt;h3 id="solution">Solution&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">import&lt;/span> pandas &lt;span style="color:#66d9ef">as&lt;/span> pd
lines &lt;span style="color:#f92672">=&lt;/span> []
&lt;span style="color:#66d9ef">with&lt;/span> open(&lt;span style="color:#e6db74">&amp;#34;/Users/cmehta/Documents/advent_of_code/inputs/2_dive.csv&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;r&amp;#34;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> f:
lines &lt;span style="color:#f92672">=&lt;/span> f&lt;span style="color:#f92672">.&lt;/span>readlines()
horizontal, depth &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> line &lt;span style="color:#f92672">in&lt;/span> lines:
direction, value &lt;span style="color:#f92672">=&lt;/span> line&lt;span style="color:#f92672">.&lt;/span>split()
&lt;span style="color:#66d9ef">if&lt;/span> direction &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;forward&amp;#34;&lt;/span>:
horizontal &lt;span style="color:#f92672">+=&lt;/span> int(value)
&lt;span style="color:#66d9ef">elif&lt;/span> direction &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;up&amp;#34;&lt;/span>:
depth &lt;span style="color:#f92672">-=&lt;/span> int(value)
&lt;span style="color:#66d9ef">elif&lt;/span> direction &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;down&amp;#34;&lt;/span>:
depth &lt;span style="color:#f92672">+=&lt;/span> int(value)
print(horizontal &lt;span style="color:#f92672">*&lt;/span> depth)
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">1962940
&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>Configuring Emacs for Rust development | Robert Krahn</title><link>https://chahak13.github.io/posts/configuring_emacs_for_rust_development_robert_krahn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/configuring_emacs_for_rust_development_robert_krahn/</guid><description>//</description><content>&lt;p>//&lt;/p></content></item><item><title>Convert video AVI/MPEG/MP4 to a Gif animation on Linux | dtbaker.net</title><link>https://chahak13.github.io/posts/convert_video_avi_mpeg_mp4_to_a_gif_animation_on_linux_dtbaker_net/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/convert_video_avi_mpeg_mp4_to_a_gif_animation_on_linux_dtbaker_net/</guid><description>Convert the video file to a series of small images:
mkdir /tmp/gif/ ffmpeg -i YOURVIDEOFILE.mp4 -r 10 -s 711×400 /tmp/gif/out%04d.gif Combine these images together into a GIF animation:
gifsicle -–delay=10 -–loop --optimize /tmp/gif/*.gif &amp;gt; animation.gif/</description><content>&lt;p>Convert the video file to a series of small images:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">mkdir /tmp/gif/
ffmpeg -i YOURVIDEOFILE.mp4 -r &lt;span style="color:#ae81ff">10&lt;/span> -s 711×400 /tmp/gif/out%04d.gif
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Combine these images together into a GIF animation:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">gifsicle -–delay&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">10&lt;/span> -–loop --optimize /tmp/gif/*.gif &amp;gt; animation.gif/
&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>emacs</title><link>https://chahak13.github.io/posts/emacs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/emacs/</guid><description/><content/></item><item><title>emacs-jupyter and inline images in org-mode</title><link>https://chahak13.github.io/posts/emacs_jupyter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/emacs_jupyter/</guid><description>emacs-jupyter is an emacs interface for jupyter kernels. It can be installed using
(use-package jupyter :straight t) If ob-async is installed, then jupyter-python needs to be added to the list of languages that are not run asychronously. (Refer this issue). This can be done by
(setq ob-async-no-async-languages-alist &amp;#39;(&amp;#34;jupyter-python&amp;#34;)) An example python block:
print(&amp;quot;ab&amp;quot;) ab emacs-jupyter works doesn&amp;rsquo;t work in server When I first installed emacs-jupyter I found a weird situation where I could not run jupyter code blocks in org-mode if emacs was started as a daemon.</description><content>&lt;p>&lt;code>emacs-jupyter&lt;/code> is an emacs interface for jupyter kernels. It can be installed using&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">(use-package jupyter
:straight &lt;span style="color:#66d9ef">t&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If &lt;code>ob-async&lt;/code> is installed, then &lt;code>jupyter-python&lt;/code> needs to be added to the list of languages that are not run asychronously. (Refer &lt;a href="https://github.com/astahlman/ob-async/pull/71">this issue&lt;/a>). This can be done by&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">(setq ob-async-no-async-languages-alist &lt;span style="color:#f92672">&amp;#39;&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;jupyter-python&amp;#34;&lt;/span>))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>An example python block:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-jupyter-python" data-lang="jupyter-python">print(&amp;quot;ab&amp;quot;)
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">ab
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="emacs-jupyter-works-doesn-t-work-in-server">emacs-jupyter works doesn&amp;rsquo;t work in server&lt;/h2>
&lt;p>When I first installed &lt;code>emacs-jupyter&lt;/code> I found a weird situation where I could not run jupyter code blocks in org-mode if emacs was started as a daemon. On the other hand, if it was started separately as a window, everything ran fine. The issue was that I was adding &lt;code>/home/boticelli/.local/bin/&lt;/code> (path to jupyter executable) to &lt;code>exec-path&lt;/code> at the end of the config files. When opening emacs from a terminal as an independent session, it was considering this added path somehow, maybe by inheriting it from the shell itself, but it was. I moved that line to near the beginning of the &lt;code>init.el&lt;/code> file itself and this seemed to solve the issue. This issue was very similar to the &lt;a href="https://chahak13.github.io/posts/pipenv_in_emacs/">Pipenv in emacs&lt;/a> issue that I had recently.&lt;/p>
&lt;h2 id="why-emacs-jupyter">Why emacs-jupyter&lt;/h2>
&lt;p>Running python code in normal org-mode source block is nice and easy. But using them to plot images was a bit painful/difficult. Since &lt;code>emacs-jupyter&lt;/code> uses &lt;code>ipython&lt;/code> kernel, it allows some magic commands like &lt;code>%matplotlib inline&lt;/code> etc to make this easier. It also gives &lt;code>%timeit&lt;/code> which is really useful.&lt;/p>
&lt;p>Now, with &lt;code>emacs-jupyter&lt;/code>, I can do imports like this and make plotting easier for myself.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-jupyter-python" data-lang="jupyter-python">%matplotlib inline
import numpy as np
import matplotlib.pyplot as plt
fig, ax = plt.subplots()
ax.hist(np.random.default_rng().normal(0, 1, 50000), bins=100);
&lt;/code>&lt;/pre>
&lt;figure class="left" >
&lt;img src="https://chahak13.github.io/ox-hugo/normal_dist.png" />
&lt;/figure></content></item><item><title>Estimating residence-time matrix</title><link>https://chahak13.github.io/posts/estimating_residence_time_matrix/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/estimating_residence_time_matrix/</guid><description>Extending Notes on: Horne, J. S., Garton, E. O., Krone, S. M., &amp;amp; Lewis, J. S. (2007): Analyzing Animal Movements Using Brownian Bridges, we now want to calculate the residence-time matrix for various polygons (AGEBs). To do this, we will use the geopandas library along with the data from Hermisillo that we have for a set of individuals. We will currently work with the data of just one individual.
AGEB data The data for the AGEBs was provided by INEGI (National Institute of Statistics and Geography).</description><content>&lt;p>Extending Notes on: Horne, J. S., Garton, E. O., Krone, S. M., &amp;amp; Lewis, J. S. (2007): Analyzing Animal Movements Using Brownian Bridges, we now want to calculate the residence-time matrix for various polygons (AGEBs). To do this, we will use the &lt;code>geopandas&lt;/code> library along with the data from Hermisillo that we have for a set of individuals. We will currently work with the data of just one individual.&lt;/p>
&lt;h2 id="ageb-data">AGEB data&lt;/h2>
&lt;p>The data for the AGEBs was provided by INEGI (National Institute of Statistics and Geography). There are a total of 582 AGEBs of which we might discard some that are not of interest. From the data, we particularly care about &lt;code>CVE_AGEB&lt;/code> and the geometry - which is a polygon.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">import&lt;/span> geopandas &lt;span style="color:#66d9ef">as&lt;/span> gpd
data &lt;span style="color:#f92672">=&lt;/span> gpd&lt;span style="color:#f92672">.&lt;/span>read_file(&lt;span style="color:#e6db74">&amp;#34;/home/boticelli/Documents/uta/code/residence-time/bbmm-drive/26a.shp&amp;#34;&lt;/span>)
data&lt;span style="color:#f92672">.&lt;/span>head()
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can confirm that there are 582 AGEBs by checking the number of rows in the dataframe &lt;code>data&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python"> len(data)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Each &lt;code>GeoSeries&lt;/code> has a corresponding &lt;em>CRS&lt;/em> (Coordinate Reference System) that defines the system used for the projection. If a &lt;code>GeoDataFrame&lt;/code> has only one column that corresponds to a &lt;code>GeoSeries&lt;/code>, then the CRS of that series corresponds to the CRS of the dataframe. A dataframe can also have multiple &lt;code>GeoSeries&lt;/code>, each with their own corresponding CRS. In such a case, one of the series is designated as the active geometry column and is used by default for any geometrical operations.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">data&lt;span style="color:#f92672">.&lt;/span>crs
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here, the data we have is in the &amp;ldquo;MEXICO_ITRF_2008_LCC&amp;rdquo; system. We will now transform the system to a Pseudomercator system for ease of use. This can be done using the &lt;code>geopandas.GeoDataFrame.to_crs&lt;/code> function. The EPSG code corresponding to Pseudomercator projection is &lt;em>EPSG:3857&lt;/em>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">data&lt;span style="color:#f92672">.&lt;/span>to_crs(&lt;span style="color:#e6db74">&amp;#34;EPSG:3857&amp;#34;&lt;/span>, inplace&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can also visualize this data using plotting functionality in geopandas and matplotlib.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">import&lt;/span> matplotlib.pyplot &lt;span style="color:#66d9ef">as&lt;/span> plt
data&lt;span style="color:#f92672">.&lt;/span>plot(figsize&lt;span style="color:#f92672">=&lt;/span>(&lt;span style="color:#ae81ff">5&lt;/span>,&lt;span style="color:#ae81ff">5&lt;/span>))
plt&lt;span style="color:#f92672">.&lt;/span>savefig(&lt;span style="color:#e6db74">&amp;#39;/home/boticelli/Documents/uta/code/residence-time/agebs.png&amp;#39;&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>Export source code of tex file</title><link>https://chahak13.github.io/posts/export_source_code_of_tex_file/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/export_source_code_of_tex_file/</guid><description>Export source code of tex file I have to create a training guide for Maple as part of an assignment. Obviously I need to hand in the final PDF document, but I also need to hand in the LaTeX source code to prove that I created the document using LaTeX. Is there a way of exporting the source code with all the colours, indentation etc. still in place?
Comments
(JP-Ellis) Welcome to LaTeX!</description><content>&lt;h2 id="export-source-code-of-tex-file">&lt;a href="https://tex.stackexchange.com/questions/296758/export-source-code-of-tex-file">Export source code of tex file&lt;/a>&lt;/h2>
&lt;p>I have to create a training guide for Maple as part of an assignment. Obviously I need to hand in the final PDF document, but I also need to hand in the LaTeX source code to prove that I created the document using LaTeX. Is there a way of exporting the source code with all the colours, indentation etc. still in place?&lt;/p>
&lt;p>Comments&lt;/p>
&lt;ul>
&lt;li>(&lt;em>JP-Ellis&lt;/em>) Welcome to LaTeX! Welcome to TeX.SX! Just to clarify, where are you intending to export the LaTeX source? Are you looking to embed the TeX file into the PDF? or do you want to pretty-print the LaTeX source?&lt;/li>
&lt;li>(&lt;em>George Wilson&lt;/em>) Ideally, the LaTeX source code would follow the actual PDF document.&lt;/li>
&lt;li>(&lt;em>jamesqf&lt;/em>) I think you have a major misunderstanding here. The colors you may see as you write your LaTeX source (I&amp;rsquo;m assuming you mean syntax colorization?) are not part of LaTeX or the source file, they are applied by whatever editor you&amp;rsquo;re using to write the LaTeX code. Likewise, there&amp;rsquo;s no need to &amp;lsquo;export&amp;rsquo; the LaTeX file, as your editor should already have saved it on your hard drive. Indentation is a part of that file. You can, as others have said, include that file in your LaTeX document, or you can simply print it as a plain text file.&lt;/li>
&lt;li>(&lt;em>Bakuriu&lt;/em>) When they tell you to provide the sources it means you just hand them the .tex file so that they can compile them and check the output pdf is the same you handed in&amp;hellip;&lt;/li>
&lt;/ul>
&lt;h3 id="answer-1">Answer 1&lt;/h3>
&lt;p>Here is a &lt;code>tcolorbox&lt;/code> - &lt;code>listings&lt;/code> way of inputting the document itself to the file and displaying the code.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">\documentclass{article}
\usepackage[most]{tcolorbox}
\begin{document}
This is my nice \LaTeXe{} file.
It shows the code of itself:
\tcbinputlisting{breakable,listing file=\jobname.tex,listing only,colback=white!40!yellow,sharp corners}
\end{document}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>[[&lt;img src="https://i.stack.imgur.com/eApUH.png" alt="">][]]
For breakable boxes:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">\documentclass{article}
\usepackage[T1]{fontenc}
\usepackage[utf8]{inputenc}
\usepackage[most]{tcolorbox}
\begin{document}
This is my nice \LaTeXe{} file.
It shows the code of it self -- and here is some blind text to make the text longer
Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras dapibus. Vivamus elementum semper nisi. Aenean vulputate eleifend tellus. Aenean leo ligula, porttitor eu, consequat vitae, eleifend ac, enim. Aliquam lorem ante, dapibus in, viverra quis, feugiat a, tellus. Phasellus viverra nulla ut metus varius laoreet. Quisque rutrum. Aenean imperdiet. Etiam ultricies nisi vel augue. Curabitur ullamcorper ultricies nisi. Nam eget dui. Etiam rhoncus. Maecenas tempus, tellus eget condimentum rhoncus, sem quam semper libero, sit amet adipiscing sem neque sed ipsum. Nam quam nunc, blandit vel, luctus pulvinar, hendrerit id, lorem. Maecenas nec odio et ante tincidunt tempus. Donec vitae sapien ut libero venenatis faucibus. Nullam quis ante. Etiam sit amet orci eget eros faucibus tincidunt. Duis leo. Sed fringilla mauris sit amet nibh. Donec sodales sagittis magna. Sed consequat, leo eget bibendum sodales, augue velit cursus nunc, quis gravida magna mi a libero. Fusce vulputate eleifend sapien. Vestibulum purus quam, scelerisque ut, mollis sed, nonummy id, metus. Nullam accumsan lorem in dui. Cras ultricies mi eu turpis hendrerit fringilla. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; In ac dui quis mi consectetuer lacinia. Nam pretium turpis et arcu. Duis arcu tortor, suscipit eget, imperdiet nec, imperdiet iaculis, ipsum. Sed aliquam ultrices mauris. Integer ante arcu, accumsan a, consectetuer eget, posuere ut, mauris. Praesent adipiscing. Phasellus ullamcorper ipsum rutrum nunc. Nunc nonummy metus. Vestibulum volutpat pretium libero. Cras id dui. Aenean ut
\tcbinputlisting{breakable,listing file=\jobname.tex,listing only,colback=white!40!yellow,sharp corners}
\end{document}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>[]]
[[https://i.stack.imgur.com/GANeH.png]&lt;a href="https://i.stack.imgur.com/wbGAM.png">&lt;/a>&lt;/p>
&lt;p>Comments:&lt;/p>
&lt;ul>
&lt;li>(&lt;em>George Wilson&lt;/em>) I love that. My source code spans over many pages (over 300 lines at the moment) and this solution seems to not split the code over several pages. How can I solve this?&lt;/li>
&lt;li>(&lt;em>user31729&lt;/em>) @Will: Add the breakable option to the \tcbinputlisting options. See the updated code (but i did not add a new screen shot (yet))&lt;/li>
&lt;li>(&lt;em>George Wilson&lt;/em>) Just added that argument in. Thanks a lot, looks great!&lt;/li>
&lt;li>(&lt;em>George Wilson&lt;/em>) Another question, when the inputted code is in math mode, it goes off the screen. How can I prevent this?&lt;/li>
&lt;li>(&lt;em>user31729&lt;/em>) @Will: That&amp;rsquo;s another question ;-)&lt;/li>
&lt;/ul>
&lt;h3 id="answer-2">Answer 2&lt;/h3>
&lt;p>One possibility is to simply input the TeX file in a verbatim environment. A really neat option is the &lt;a href="http://ctan.org/pkg/minted">&lt;code>minted&lt;/code>&lt;/a> package which has nice syntax highlighting:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">\documentclass{article}
\usepackage{minted}
\usepackage{mwe}
\begin{document}
\blinddocument
\clearpage
\inputminted[bgcolor=gray!10]{latex}{will.tex}
\end{document}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This places, on the last page, the following:
[[&lt;img src="https://i.stack.imgur.com/YgIDW.png" alt="">][]]
You can customize the appearance of the output in minted.
If you don&amp;rsquo;t like &lt;code>minted&lt;/code>, there are other packages to typeset code as well and you should be able to use them in essentially the same way. Have a search through this website to see a few other options.&lt;/p>
&lt;p>Comments:&lt;/p>
&lt;h3 id="answer-3">Answer 3&lt;/h3>
&lt;p>I use this construction in the &lt;code>\LaTeX&lt;/code> source for exercises for my students&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">\usepackage{verbatim}
...
\newpage
\emph{
Here is the \LaTeX{} source for this document. You can cut it from the
pdf and use it to start your answers. I used the \verb!\jobname!
\emph{macro for the source file name, so you can call your file by any
name you like.}
\verbatiminput{\jobname}
\end{document}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Comments:&lt;/p>
&lt;h3 id="answer-4">Answer 4&lt;/h3>
&lt;p>try&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">\begin{verbatimwrite}{myfile}
\end{verbatimwrite}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Comments:&lt;/p></content></item><item><title>Export tikz as image file</title><link>https://chahak13.github.io/posts/export_tikz_as_image_file/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/export_tikz_as_image_file/</guid><description>Export tikz as image file I have created a tikz picture as a standalone. Can I export the tex file as an image instead of as a pdf?
Comments
(Johannes_B) No, but you can easily convert the pdf to jpg or png. (Arun Debray) A couple possible solutions are discussed in tex.stackexchange.com/a/11880/55879. (user11232) standalone provides convert option. For this you will need imagemagick installed. (user11232) Or you can directly convert it using imagemagick → convert -density 300 yourfile.</description><content>&lt;h2 id="export-tikz-as-image-file">&lt;a href="https://tex.stackexchange.com/questions/275023/export-tikz-as-image-file">Export tikz as image file&lt;/a>&lt;/h2>
&lt;p>I have created a tikz picture as a standalone.
Can I export the tex file as an image instead of as a pdf?&lt;/p>
&lt;p>Comments&lt;/p>
&lt;ul>
&lt;li>(&lt;em>Johannes_B&lt;/em>) No, but you can easily convert the pdf to jpg or png.&lt;/li>
&lt;li>(&lt;em>Arun Debray&lt;/em>) A couple possible solutions are discussed in tex.stackexchange.com/a/11880/55879.&lt;/li>
&lt;li>(&lt;em>user11232&lt;/em>) standalone provides convert option. For this you will need imagemagick installed.&lt;/li>
&lt;li>(&lt;em>user11232&lt;/em>) Or you can directly convert it using imagemagick → convert -density 300 yourfile.pdf yourfile.png (or .jpg whatever)&lt;/li>
&lt;li>(&lt;em>vaettchen&lt;/em>) QTikZ is a nice editor cum preview pane and offers export to PNG&lt;/li>
&lt;/ul>
&lt;h3 id="answer-1">Answer 1&lt;/h3>
&lt;p>I achieved the best results with &lt;code>pdftoppm&lt;/code>, the anti-aliasing is much better than imagemagicks &lt;code>convert&lt;/code>.
Just do:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">$ pdftoppm -png -r &amp;lt;dpi&amp;gt; document.pdf &amp;gt; document.png
&lt;/code>&lt;/pre>&lt;/div>&lt;p>I usually use 300 or 600 dpi.
&lt;code>pdftoppm&lt;/code> comes with &lt;code>poppler&lt;/code> (package &lt;code>poppler-utils&lt;/code> on Ubuntu).&lt;/p>
&lt;p>Comments:&lt;/p>
&lt;h3 id="answer-2">Answer 2&lt;/h3>
&lt;p>If you are using Texmaker, right-click on the pdf, then choose &lt;code>convert page to png image&lt;/code> choice. &lt;strong>Note:&lt;/strong> if you intend to include this image in your tex file, then you can include the pdf directly. As a matter of fact, the quality of the pdf is better than converting the pdf to an image.&lt;/p>
&lt;p>Comments:&lt;/p></content></item><item><title>Extra function arguments to `scipy.integrate.quad_vec` · Issue #14412 · scipy/scipy</title><link>https://chahak13.github.io/posts/extra_function_arguments_to_scipy_integrate_quad_vec_issue_14412_scipy_scipy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/extra_function_arguments_to_scipy_integrate_quad_vec_issue_14412_scipy_scipy/</guid><description>This can be a good problem to try and resolve.</description><content>&lt;p>This can be a good problem to try and resolve.&lt;/p></content></item><item><title>Force figure placement in text</title><link>https://chahak13.github.io/posts/force_figure_placement_in_text/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/force_figure_placement_in_text/</guid><description>Force figure placement in text I have a problem when a lot of figures are in question. Some figures tend to &amp;ldquo;fly around&amp;rdquo;, that is, be a paragraph below, although I placed them before that paragraph. I use code:
\begin{figure}[ht] \begin{center} \advance\leftskip-3cm \advance\rightskip-3cm \includegraphics[keepaspectratio=true,scale=0.6]{slike/visina8} \caption{} \label{visina8} \end{center}\end{figure} to place my figures. How can I tell latex I REALLY want the figure in that specific place, no matter how much whitespace will be left?</description><content>&lt;h2 id="force-figure-placement-in-text">&lt;a href="https://tex.stackexchange.com/questions/8625/force-figure-placement-in-text">Force figure placement in text&lt;/a>&lt;/h2>
&lt;p>I have a problem when a lot of figures are in question. Some figures tend to &amp;ldquo;fly around&amp;rdquo;, that is, be a paragraph below, although I placed them before that paragraph. I use code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">\begin{figure}[ht]
\begin{center}
\advance\leftskip-3cm
\advance\rightskip-3cm
\includegraphics[keepaspectratio=true,scale=0.6]{slike/visina8}
\caption{}
\label{visina8}
\end{center}\end{figure}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>to place my figures. How can I tell latex I REALLY want the figure in that specific place, no matter how much whitespace will be left?&lt;/p>
&lt;p>Comments&lt;/p>
&lt;ul>
&lt;li>(&lt;em>Martin Scharrer&lt;/em>) Sidenote: Don&amp;rsquo;t use the center environment but the \centering command for figures. See Should I use center or centering for figures and tables?&lt;/li>
&lt;li>(&lt;em>codeman48&lt;/em>) To definitely place a paragraph after a figure, use the command \FloatBarrier somewhere between the figure and the paragraph. It forces all figures defined before the command to render before that point in text. You will need to add \usepackage{placeins} in the preamble to use the command. Sometimes, I have found this very useful.&lt;/li>
&lt;li>(&lt;em>Benjamin McKay&lt;/em>) I gave up using the figure environment, and just use small figures embedded in text or centered between paragraphs. Smaller figures fit better.&lt;/li>
&lt;/ul>
&lt;h3 id="answer-1">Answer 1&lt;/h3>
&lt;p>&lt;strong>The short answer:&lt;/strong> use the “&lt;a href="http://www.ctan.org/tex-archive/help/Catalogue/entries/float.html">float&lt;/a>” package and then the &lt;code>[H]&lt;/code> option for your figure.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">\usepackage{float}
...
\begin{figure}[H]
\centering
\includegraphics{slike/visina8}
\caption{Write some caption here}\label{visina8}
\end{figure}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>The longer answer:&lt;/strong> The default behaviour of figures is to float, so that LaTeX can find the best way to arrange them in your document and make it look better. If you have a look, this is how books are often typeset. So, usually the best thing to do is just to let LaTeX do its work and don&amp;rsquo;t try to force the placement of figures at specific locations. This also means that you should avoid using phrases such as “~in the following figure:~”, which requires the figure to be set a specific location, and use “~in Figure~\ref{..}~“ instead, taking advantage of LaTeX&amp;rsquo;s cross-references.
If for some reason you &lt;em>really&lt;/em> want some particular figure to be placed “HERE”, and not where LaTeX wants to put it, then use the &lt;code>[H]&lt;/code> option of the “&lt;a href="http://www.ctan.org/tex-archive/help/Catalogue/entries/float.html">float&lt;/a>” package which basically turns the floating figure into a regular non-float.
Also note that, if you don&amp;rsquo;t want to add a &lt;code>caption&lt;/code> to your figure, then you don&amp;rsquo;t need to use the &lt;code>figure&lt;/code> environment at all! You can use the &lt;code>\includegraphics&lt;/code> command anywhere in your document to insert an image.&lt;/p>
&lt;p>Comments:&lt;/p>
&lt;ul>
&lt;li>(&lt;em>Juan A. Navarro&lt;/em>) thanks for noting this! I wasn&amp;rsquo;t aware of the change. H doesn&amp;rsquo;t seem to work without any packages, but does work loading float. Is H from float the same as !h?&lt;/li>
&lt;li>(&lt;em>user2478&lt;/em>) no, [!h] is changed anyway by most documentclasses to [!ht]. And the meaning of h is only: here, if possible, but not absolutely here. The ! allows LaTeX to minimze all counters and lengths which refer to floating environments.&lt;/li>
&lt;li>(&lt;em>Evgeni Sergeev&lt;/em>) For documents not intended to be printed, there is no reason to try and save paper, so large areas of whitespace aren&amp;rsquo;t a problem. So it&amp;rsquo;s much better to have the figure breaking the text at the most logical point, rather than floating somewhere else. These awkward conventions will go just like Latin went.&lt;/li>
&lt;li>(&lt;em>Juan A. Navarro&lt;/em>) I don&amp;rsquo;t think that the usual concerns are about saving space, rather than stylistically trying to find the best place where to place a figure, table, etc.&lt;/li>
&lt;li>(&lt;em>Henrique Fernandes Cipriano&lt;/em>) you save lifes!&lt;/li>
&lt;/ul>
&lt;h3 id="answer-2">Answer 2&lt;/h3>
&lt;p>do &lt;em>not&lt;/em> use a floating environment if you do not want it float.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">\usepackage{caption}
...
\noindent%
\begin{minipage}{\linewidth}% to keep image and caption on one page
\makebox[\linewidth]{% to center the image
\includegraphics[keepaspectratio=true,scale=0.6]{slike/visina8}}
\captionof{figure}{...}\label{visina8}% only if needed
\end{minipage}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>or&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">\begin{center}
\includegraphics[...]{slike/visina8}}
\captionof{figure}{...}\label{visina8}% only if needed
\end{center}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Comments:&lt;/p>
&lt;ul>
&lt;li>(&lt;em>sdaau&lt;/em>) Hi @Herbert - thanks a LOT for this answer! I had never before understood that \begin{figure} is a floating environment - while \begin{minipage} is not! I had a problem with wanting to include an image on bottom of page w/ text, and not even [H] helped; only this! I just replaced minipage for figure - and captionof for caption - and finally got what I wanted!! Thanks a lot again, cheers!&lt;/li>
&lt;li>(&lt;em>Tobi&lt;/em>) Why do you use a \makebox? Doesn’t it look the same without it?&lt;/li>
&lt;li>(&lt;em>user2478&lt;/em>) @Tobi: if the image is not larger than \textwidth yes, otherwise not! \makebox centers the image independently from its width&lt;/li>
&lt;li>(&lt;em>user2820379&lt;/em>) This was so super helpful; IMHO this should be the accepted answer as it works more as expected as the currently accepted one.&lt;/li>
&lt;/ul>
&lt;h3 id="answer-3">Answer 3&lt;/h3>
&lt;p>One solution not mentioned by any of the other answers that just sorted me out is to use &lt;code>\clearpage&lt;/code>
No special packages are needed.
&lt;code>\clearpage&lt;/code> forces all figures above it in the &lt;code>.tex&lt;/code> file to be printed before continuing with the text. This can leave large white spaces.
For me this was the best solution because I did not have to change any of the formatting and it just made sure that all figures were printed before the next bit of text. My issue was a part of the document with lots of figures and not much text.&lt;/p>
&lt;p>Comments:&lt;/p>
&lt;h3 id="answer-4">Answer 4&lt;/h3>
&lt;p>You can now use the &lt;code>adjustbox&lt;/code> package to turn your boxed stuff into a non-floating float replacement using the &lt;code>nofloat=&amp;amp;lt;type&amp;amp;gt;&lt;/code> key. Caption and label can be added by own keys, &lt;em>before&lt;/em> the &lt;code>nofloat&lt;/code>. For centering the &lt;code>center&lt;/code> key can be used. To add the vertical space use the &lt;code>vspace&lt;/code> key. This solution has the benefit, that you can also use all the many other features of &lt;code>adjustbox&lt;/code> to modify the content (min/max scaling, framing, etc.)
Note that if the figure content is just a single image you can just use the same keys on &lt;code>\adjustbox&lt;/code> and get a one-liner. If all you want is a tabular then there is the &lt;code>tabular&lt;/code> key for &lt;code>{adjustbox}&lt;/code>.
If you later want to change it to a real float just turn &lt;code>nofloat&lt;/code> to &lt;code>float&lt;/code> and remove the &lt;code>vspace&lt;/code> key. &lt;code>adjustbox&lt;/code> places the caption on top for &lt;code>table~s and on bottom for ~figure~s. This can be changed by using the keys ~captionbelow&lt;/code> or &lt;code>captionabove&lt;/code> instead of &lt;code>caption&lt;/code>.
See the &lt;code>adjustox&lt;/code> manual for all options.
If you don&amp;rsquo;t want to box the content you can still use the &lt;code>adjustbox&lt;/code> package as it provides the &lt;code>{adjnofloat}{&amp;amp;lt;type&amp;amp;gt;}&lt;/code> environment. It is used internally to implement the &lt;code>nofloat&lt;/code> key. Users can either redefine this environment to change or patch the &lt;code>nofloat&lt;/code> behavior or use the environment directly. The environment uses code very similar as in &lt;a href="https://tex.stackexchange.com/a/8631/2975">Herberts answer&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">\documentclass{article}
\usepackage{blindtext}% for example text here only
\usepackage{adjustbox}
\begin{document}
\blindtext
\begin{adjustbox}{center,caption={some caption},label={somelabel},nofloat=figure,vspace=\bigskipamount}
% maybe other stuff
\includegraphics[width=\textwidth]{example-image}% example only, could also be \adjustimage
% maybe other stuff
\end{adjustbox}
\blindtext
% For simple images, a one liner is enough
\adjustimage{width=\textwidth,center,caption={some caption},label={somelabel},nofloat=figure,vspace=\bigskipamount}{example-image}
\blindtext
\begin{adjustbox}{center,caption={some caption},label={somelabel},nofloat=table,vspace=\bigskipamount}
% maybe other stuff
\begin{tabular}{lll}
some &amp;amp; tabular &amp;amp; is\\
also &amp;amp; possible &amp;amp; with this \\
\end{tabular}
% maybe other stuff
\end{adjustbox}
\blindtext
% For just a tabular:
\begin{adjustbox}{tabular=lll,center,caption={some caption},label={somelabel},nofloat=table,vspace=\bigskipamount}
some &amp;amp; tabular &amp;amp; is\\
also &amp;amp; possible &amp;amp; with this \\
\end{adjustbox}
\blindtext
\end{document}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Part of the result:
[[&lt;img src="https://i.stack.imgur.com/ERcI5.png" alt="">][]]&lt;/p>
&lt;p>Comments:&lt;/p>
&lt;h3 id="answer-5">Answer 5&lt;/h3>
&lt;p>Use &lt;code>[ht!]&lt;/code> to be more emphatic about placement. And, if you want text to follow the figure, instead of beginning before, employ &lt;code>\usepackage{parskip}&lt;/code> in your preamble, and allow a space before the text in question.
I also employ &lt;code>\vspace{}&lt;/code> or &lt;code>\vspace*{}&lt;/code> before the figure environment in order to manipulate the space between text and figure to give a more balanced look. I don&amp;rsquo;t have any trouble this way, even with more complex multifigure environments employing &lt;code>\subfigure&lt;/code>.&lt;/p>
&lt;p>Comments:&lt;/p></content></item><item><title>Generative Art – Katharina Brunner</title><link>https://chahak13.github.io/posts/software_katharina_brunner/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/software_katharina_brunner/</guid><description>This covers a blog and a github repo that looks at generative art made using R.</description><content>&lt;p>This covers a blog and a github repo that looks at generative art made using R.&lt;/p></content></item><item><title>Github Action: Split Long Command into Multiple Lines</title><link>https://chahak13.github.io/posts/github_action_split_long_command_into_multiple_lines/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/github_action_split_long_command_into_multiple_lines/</guid><description>Github Action: Split Long Command into Multiple Lines I have a Github action command that is really long:
name: build on: [push] jobs: build: runs-on: ubuntu-18.04 steps: - uses: actions/checkout@v1 - name: Install Prerequisites run: | sudo apt-get update sudo apt-get install -y --no-install-recommends &amp;#34;a very very long list of prerequisites&amp;#34; May I know whether it is possible to split the long command into multiple lines for better readability? I have tried the separator &amp;lsquo;\&amp;rsquo; but it does not work.</description><content>&lt;h2 id="github-action-split-long-command-into-multiple-lines">&lt;a href="https://stackoverflow.com/questions/59954185/github-action-split-long-command-into-multiple-lines">Github Action: Split Long Command into Multiple Lines&lt;/a>&lt;/h2>
&lt;p>I have a Github action command that is really long:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">name: build
on: [push]
jobs:
build:
runs-on: ubuntu-18.04
steps:
- uses: actions/checkout@v1
- name: Install Prerequisites
run: |
sudo apt-get update
sudo apt-get install -y --no-install-recommends &amp;#34;a very very long list of prerequisites&amp;#34;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>May I know whether it is possible to split the long command into multiple lines for better readability? I have tried the separator &amp;lsquo;\&amp;rsquo; but it does not work. Thanks in advance.&lt;/p>
&lt;p>Comments&lt;/p>
&lt;h3 id="answer-1">Answer 1&lt;/h3>
&lt;p>I have a multi line command using backslash to separate the lines as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">- name: Configure functions
run: |
firebase functions:config:set \
some.key1=&amp;#34;${{ secrets.SOME_KEY_1 }}&amp;#34; \
some.key2=&amp;#34;${{ secrets.SOME_KEY_2 }}&amp;#34; \
...
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note the preceding &amp;lsquo;|&amp;rsquo; character.&lt;/p>
&lt;p>Comments:&lt;/p>
&lt;ul>
&lt;li>(&lt;em>tom&lt;/em>) This is the correct answer and would be a better accepted answer. The backslashes work the same as a multiline command in bash. (I&amp;rsquo;d recommend a hanging indent for readability though.)&lt;/li>
&lt;li>(&lt;em>dan1st&lt;/em>) Does anyone know since when this is possible? (I think it was not possible when I wrote my answer but I fully agree with that answer being accepted, now)&lt;/li>
&lt;li>(&lt;em>Bojian Zheng&lt;/em>) @dan1st I also do not think this is possible by the time I asked this, but it seems that Github people have added the support for backslash.&lt;/li>
&lt;li>(&lt;em>mcserep&lt;/em>) I don&amp;rsquo;t know how did it work previously for anyone, but adding a backslash does not work right now with GitHub Actions. This shouldn&amp;rsquo;t be the accepted answer.&lt;/li>
&lt;li>(&lt;em>IvanD&lt;/em>) I confirm: this does not work on GitHub Actions as of now. You need to use &amp;ldquo;&amp;gt;&amp;rdquo; instead of &amp;ldquo;I&amp;rdquo; (see other answers)&lt;/li>
&lt;/ul>
&lt;h3 id="answer-2">Answer 2&lt;/h3>
&lt;p>You can use the YAML &lt;strong>folded style&lt;/strong> with &lt;code>&amp;amp;gt;&lt;/code> which is supported by GitHub Actions.
For example,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">run: &amp;gt;
xvfb-run
./mvnw -f my/pom.xml
clean verify
-DskipTests
&lt;/code>&lt;/pre>&lt;/div>&lt;p>newlines will be replaced with spaces so the above is equivalent to&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">run: xvfb-run ./mvnw -f my/pom.xml clean verify -DskipTests
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Comments:&lt;/p>
&lt;ul>
&lt;li>(&lt;em>sschuberth&lt;/em>) Also see yaml-multiline.info to play around with the different scalar / chomping styles.&lt;/li>
&lt;li>(&lt;em>Johnny Oshika&lt;/em>) This works, thank you! Important note: per yml spec, white space is important here, so any extra tabs before the lines will cause problems.&lt;/li>
&lt;li>(&lt;em>OZZIE&lt;/em>) It seems to work but it doesn&amp;rsquo;t fail on any errors, same with | also.. so it becomes kind of pointless..&lt;/li>
&lt;li>(&lt;em>ruohola&lt;/em>) @JohnnyOshika Thank you for that comment! It cleared a long standing misunderstanding for me.&lt;/li>
&lt;li>(&lt;em>Waldir Leoncio&lt;/em>) Just a quick note about this being for the default shell. For example, my YML file had some bits running R code with shell: Rscript {0}, and line breaking in those cases don&amp;rsquo;t need any special characters (just like in R).&lt;/li>
&lt;/ul>
&lt;h3 id="answer-3">Answer 3&lt;/h3>
&lt;p>Going to share this in since it has not been mentioned.
You can use:
I found the site &lt;a href="https://yaml-multiline.info/">yaml-multiline.info&lt;/a> useful for understanding how yaml strings are interpreted.
For my use case, I ended up doing the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">run: &amp;gt;-
for i in $(find . -type f -name &amp;#34;*.log&amp;#34;);
do
echo &amp;#34;File: ${i} \n&amp;#34;;
cat $i;
printf &amp;#39;%*s\n&amp;#39; &amp;#34;${COLUMNS:-$(tput cols)}&amp;#34; &amp;#39;&amp;#39; | tr &amp;#39; &amp;#39; -;
done
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Comments:&lt;/p>
&lt;ul>
&lt;li>(&lt;em>silkfire&lt;/em>) What does the hyphen in &amp;gt;- do?&lt;/li>
&lt;li>(&lt;em>Arclite&lt;/em>) @silkfire According to the linked website, it appears to strip newlines from the end of the block, so that there&amp;rsquo;s not an extra trailing \n at the end.&lt;/li>
&lt;li>(&lt;em>Arclite&lt;/em>) That said, this is not supported by GitHub Actions: github.com/actions/runner/issues/418&lt;/li>
&lt;/ul>
&lt;h3 id="answer-4">Answer 4&lt;/h3>
&lt;p>This was not possible using backslashes, earlier. See the accepted answer on how to do it now.
As far as I know, GitHub Actions does not support that.
However, you can use environment variables for that.
For example, this script splits your command in 3 lines of code and executes it as one line.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">steps:
- name: Install Prerequisites
run: |
sudo apt-get update
bash -c &amp;#34;$line1 $line2 $line3&amp;#34;
env:
- line1=&amp;#39;sudo apt-get install -y --no-install-recommends &amp;#39;
- line2=&amp;#39;a very very long list&amp;#39;
- line3=&amp;#39;of prerequisites&amp;#39;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>It creates the environment variables &lt;code>line1&lt;/code>, &lt;code>line2&lt;/code> and &lt;code>line3&lt;/code> and concats and executes them in a bash session.&lt;/p>
&lt;p>Comments:&lt;/p>
&lt;h3 id="answer-5">Answer 5&lt;/h3>
&lt;p>Note also the &lt;a href="https://help.github.com/en/actions/reference/contexts-and-expression-syntax-for-github-actions#join">join&lt;/a> and &lt;a href="https://help.github.com/en/actions/reference/contexts-and-expression-syntax-for-github-actions#format">format&lt;/a> functions for expressions:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">HELLO_WORLD = ${{ join(&amp;#39;Hello&amp;#39;, &amp;#39;world!&amp;#39;) }}
HELLO_WORLD = ${{ format(&amp;#39;{{Hello {0}}}&amp;#39;, &amp;#39;World&amp;#39;) }}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Presumably these could be combined with env variables.&lt;/p>
&lt;p>Comments:&lt;/p></content></item><item><title>Hello note-taking</title><link>https://chahak13.github.io/posts/hello_notetaking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/hello_notetaking/</guid><description>Setup for org-roam and its compatriots
This is the first note step to note-taking&amp;hellip;</description><content>&lt;p>&lt;a href="https://chahak13.github.io/posts/org_roam/">Setup for org-roam and its compatriots&lt;/a>&lt;/p>
&lt;p>This is the first &lt;del>note&lt;/del> step to note-taking&amp;hellip;&lt;/p></content></item><item><title>Hillshading in matplotlib</title><link>https://chahak13.github.io/posts/hillshading_in_matplotlib/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/hillshading_in_matplotlib/</guid><description>Matplotlib provides a light source and shading library. This can be used to create some extremely great and pleasing visualizations - for examples see this Twitter post by James Beattie or this visualization by Noam Vogt-Vincent. This has increased my curiousity about what and how to use this shading module of matplotlib. This particular post will be based on the simple example shown on the matplotlib page (here).
Let us first import the required libraries.</description><content>&lt;p>Matplotlib provides a light source and shading library. This can be used to create some extremely great and pleasing visualizations - for examples see &lt;a href="https://twitter.com/astro%5Fturb/status/1392315741177671682?s=09">this&lt;/a> Twitter post by James Beattie or &lt;a href="https://twitter.com/noam%5Fvv/status/1392960446391623683">this&lt;/a> visualization by Noam Vogt-Vincent. This has increased my curiousity about what and how to use this shading module of matplotlib. This particular post will be based on the simple example shown on the matplotlib page (&lt;a href="https://matplotlib.org/stable/gallery/mplot3d/custom%5Fshaded%5F3d%5Fsurface.html#sphx-glr-gallery-mplot3d-custom-shaded-3d-surface-py">here&lt;/a>).&lt;/p>
&lt;p>Let us first import the required libraries.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-jupyter-python" data-lang="jupyter-python">import numpy as np
import matplotlib.pyplot as plt
from matplotlib import cm, cbook
from matplotlib.colors import LightSource
&lt;/code>&lt;/pre>&lt;p>Now that we have the libraries, we need to set up the data that we will use for plotting. We will use the sample data provided in matplotlib.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-jupyter-python" data-lang="jupyter-python">dem = cbook.get_sample_data(&amp;quot;jacksboro_fault_dem.npz&amp;quot;, np_load=True)
z = dem['elevation']
nrows, ncols = z.shape
x = np.linspace(dem[&amp;quot;xmin&amp;quot;], dem[&amp;quot;xmax&amp;quot;], ncols)
y = np.linspace(dem[&amp;quot;ymin&amp;quot;], dem[&amp;quot;ymax&amp;quot;], nrows)
x, y = np.meshgrid(x, y)
region = np.s_[5:50, 5:50]
x, y, z = x[region], y[region], z[region]
&lt;/code>&lt;/pre>&lt;p>We will first use this data to plot a simple surface plot without any light sources to see what it adds.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-jupyter-python" data-lang="jupyter-python">fig, ax = plt.subplots(subplot_kw=dict(projection='3d'), figsize=(8,8))
surf = ax.plot_surface(x, y, z, rstride=1, cstride=1, linewidth=0, antialiased=False, shade=False, cmap=plt.get_cmap('gist_earth'))
ax.set_xticks([])
ax.set_yticks([])
ax.set_zticks([])
fig.savefig(&amp;quot;./images/plain_surface.png&amp;quot;)
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">[]
&lt;/code>&lt;/pre>&lt;/div>
&lt;figure class="left" >
&lt;img src="https://chahak13.github.io/ox-hugo/plain_surface.png" />
&lt;/figure>
&lt;p>Now, if we add a lightsource to this, we should be able to see the differences in the plot in a much better way.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-jupyter-python" data-lang="jupyter-python">fig_l, ax_l = plt.subplots(subplot_kw=dict(projection='3d'), figsize=(8,8))
ls = LightSource(0, 45)
rgb = ls.shade(z, cmap=cm.gist_earth, vert_exag=0.1, blend_mode='soft')
ax_l.plot_surface(x, y, z, rstride=1, cstride=1, facecolors=rgb, linewidth=0, antialiased=False, shade=False)
ax_l.set_xticks([])
ax_l.set_yticks([])
ax_l.set_zticks([])
fig_l.savefig('./images/light_surface.png')
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">[]
&lt;/code>&lt;/pre>&lt;/div>
&lt;figure class="left" >
&lt;img src="https://chahak13.github.io/ox-hugo/light_surface.png" />
&lt;/figure>
&lt;p>We will try and animate this lightsource to make its presence more visible.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-jupyter-python" data-lang="jupyter-python">from matplotlib.animation import FuncAnimation
def update(frame):
ax_l.collections = []
ls = LightSource(frame%360, 45)
rgb = ls.shade(z, cmap=cm.gist_earth, vert_exag=0.1, blend_mode='soft')
ax_l.plot_surface(x, y, z, rstride=1, cstride=1, facecolors=rgb, linewidth=0, antialiased=False, shade=False)
anim = FuncAnimation(fig_l, update, frames=360)
anim.save(&amp;quot;./images/lightsource.gif&amp;quot;, writer=&amp;quot;imagemagick&amp;quot;, fps=60)
# anim.save(&amp;quot;./images/lightsource.mp4&amp;quot;, writer=&amp;quot;ffmpeg&amp;quot;, fps=60)
&lt;/code>&lt;/pre>
&lt;figure class="left" >
&lt;img src="https://chahak13.github.io/ox-hugo/lightsource.gif" />
&lt;/figure></content></item><item><title>How can you run python with a bookmark?</title><link>https://chahak13.github.io/posts/how_can_you_run_python_with_a_bookmark/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/how_can_you_run_python_with_a_bookmark/</guid><description>How can you run python with a bookmark? I am writing a script to log into web pages (I know it&amp;rsquo;s a bad idea, and I don&amp;rsquo;t care), but I need to run it with a bookmark from Firefox. Does anyone know how to help me?
Comments
(jarst) Save yourself a hassle and create a javascript bookmarklet. (Glazbee) Following on @jarst&amp;rsquo;s comment, why not just create an extention? (orangeInk) stackoverflow.</description><content>&lt;h2 id="how-can-you-run-python-with-a-bookmark">&lt;a href="https://stackoverflow.com/questions/53882628/how-can-you-run-python-with-a-bookmark">How can you run python with a bookmark?&lt;/a>&lt;/h2>
&lt;p>I am writing a script to log into web pages (I know it&amp;rsquo;s a bad idea, and I don&amp;rsquo;t care), but I need to run it with a bookmark from Firefox. Does anyone know how to help me?&lt;/p>
&lt;p>Comments&lt;/p>
&lt;ul>
&lt;li>(&lt;em>jarst&lt;/em>) Save yourself a hassle and create a javascript bookmarklet.&lt;/li>
&lt;li>(&lt;em>Glazbee&lt;/em>) Following on @jarst&amp;rsquo;s comment, why not just create an extention?&lt;/li>
&lt;li>(&lt;em>orangeInk&lt;/em>) stackoverflow.com/questions/2034373/…&lt;/li>
&lt;/ul>
&lt;h3 id="answer-1">Answer 1&lt;/h3>
&lt;p>There is no pre-made solution and as it stands, you left part of your question ambiguous.
But here is one possible outline on how you could accomplish what you want from completely inside firefox.
First off you need to get python in the browser, but it is normally compiled into machine code. The solution is the &lt;a href="http://www.transcrypt.org">Transcrypt project&lt;/a>, which is Python is transcompiled into javascript and that script is then loaded into your browser. This allows you to run python code.
Extensions to python are made so it can access the DOM in a similiar way you can from javascript.
The transcrypt website has some examples, and some more can be found at a &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/Drafts/Python">draft page at Mozilla&lt;/a>.
Your bookmarklet would be to load a script to load transcrypt and feed it your python code, something like
javascript:(function(){var el=document.createElement(&amp;lsquo;script&amp;rsquo;);el.src=&amp;lsquo;file:///something/something/transcript_loader_and_my_python_code.js&amp;rsquo;;document.body.appendChild(el);})();
But the exact bookmarklet would depend on how you go about things. Writing transcript_loader_and_my_python_code.js is on your own, but if you get the examples from the links above working it should be trivial.&lt;/p>
&lt;p>Comments:&lt;/p></content></item><item><title>How scientists colorize photos of space - YouTube</title><link>https://chahak13.github.io/posts/1_how_scientists_colorize_photos_of_space_youtube/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/1_how_scientists_colorize_photos_of_space_youtube/</guid><description>//</description><content>&lt;p>//&lt;/p></content></item><item><title>How the Personal Computer Broke the Human Body</title><link>https://chahak13.github.io/posts/how_the_personal_computer_broke_the_human_body/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/how_the_personal_computer_broke_the_human_body/</guid><description>An article on what were the effects of computer design evolution on human body</description><content>&lt;p>An article on what were the effects of computer design evolution on human body&lt;/p></content></item><item><title>How to derive the weak form of the PDE？</title><link>https://chahak13.github.io/posts/how_to_derive_the_weak_form_of_the_pde/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/how_to_derive_the_weak_form_of_the_pde/</guid><description>How to derive the weak form of the PDE？ I have some difficulties solving the weak form of the PDE： The proof of the preceding statement is elementary. The weak form of the PDE \(\nabla \cdot (A(x) \nabla u) + \omega^2 q(x) u = 0\) for all \(\phi\) that vanish at \(\partial \Omega\). Could you suggest some approaches to solve this? Thank you very much for helping me out！！
Comments</description><content>&lt;h2 id="how-to-derive-the-weak-form-of-the-pde">&lt;a href="https://math.stackexchange.com/questions/1339709/how-to-derive-the-weak-form-of-the-pde">How to derive the weak form of the PDE？&lt;/a>&lt;/h2>
&lt;p>I have some difficulties solving the weak form of the PDE：
The proof of the preceding statement is elementary. The weak form of the PDE
\(\nabla \cdot (A(x) \nabla u) + \omega^2 q(x) u = 0\)
for all \(\phi\) that vanish at \(\partial \Omega\). Could you suggest some approaches to solve this?
Thank you very much for helping me out！！&lt;/p>
&lt;p>Comments&lt;/p>
&lt;ul>
&lt;li>(&lt;em>user147263&lt;/em>) \(\begingroup\)&lt;/li>
&lt;li>(&lt;em>Chee Han&lt;/em>) \(\begingroup\)&lt;/li>
&lt;li>(&lt;em>Robert Lewis&lt;/em>) \(\begingroup\)&lt;/li>
&lt;li>(&lt;em>Robert Lewis&lt;/em>) \(\begingroup\)&lt;/li>
&lt;/ul>
&lt;h3 id="answer-1">Answer 1&lt;/h3>
&lt;p>A general way to derive a weak form is to multiply a test function on both sides of the equation and then integrate them. The second step is to use some kind of divergence theorems to derive the weak solution such that the solution is some what not so smooth as in the strong form. For your question here, we can derive the weak form as follows:
Let the equation multiply a \(\phi\in C_0^\infty\) on both sides and then integrate them, we get&lt;/p>
&lt;p>\begin{equation}
\int_\Omega-\nabla\cdot (A(x)\nabla u)\phi dx=\int_\Omega\omega^2q(x)u\phi dx.
\end{equation}&lt;/p>
&lt;p>Using the divergence theorem and the condition that \(\phi\) vanishes on bdry, the LHS becoms&lt;/p>
&lt;p>\begin{equation}
\int_\Omega (A(x)\nabla u)\cdot\nabla\phi dx.
\end{equation}&lt;/p>
&lt;p>And we have the weak form&lt;/p>
&lt;p>\begin{equation}
\int_\Omega (A(x)\nabla u)\cdot\nabla\phi dx=\int_\Omega\omega^2q(x)u\phi dx.
\end{equation}&lt;/p>
&lt;p>for all \(\phi\in C_0^\infty\).&lt;/p>
&lt;p>Comments:&lt;/p></content></item><item><title>How WhatsApp enables multi-device capability - Facebook Engineering</title><link>https://chahak13.github.io/posts/how_whatsapp_enables_multi_device_capability_facebook_engineering/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/how_whatsapp_enables_multi_device_capability_facebook_engineering/</guid><description>//</description><content>&lt;p>//&lt;/p></content></item><item><title>leandromoreira/ffmpeg-libav-tutorial: FFmpeg libav tutorial - learn how media works from basic to transmuxing, transcoding and more</title><link>https://chahak13.github.io/posts/leandromoreira_ffmpeg_libav_tutorial_ffmpeg_libav_tutorial_learn_how_media_works_from_basic_to_transmuxing_transcoding_and_more/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/leandromoreira_ffmpeg_libav_tutorial_ffmpeg_libav_tutorial_learn_how_media_works_from_basic_to_transmuxing_transcoding_and_more/</guid><description>A tutorial on what is ffmpeg, libav and what&amp;rsquo;s up with audio and video media</description><content>&lt;p>A tutorial on what is &lt;code>ffmpeg&lt;/code>, &lt;code>libav&lt;/code> and what&amp;rsquo;s up with audio and video media&lt;/p></content></item><item><title>Migrating to org-roam v2</title><link>https://chahak13.github.io/posts/migrating_to_org_roam_v2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/migrating_to_org_roam_v2/</guid><description>org-roam recently moved to v2 and introduced many breaking changes. This provided me an opportunity to do a much needed writeover for org-roam configuration. I&amp;rsquo;m going to try and implement a workflow similar to Jethro&amp;rsquo;s, as a starting step.
Installing All the package repository recipies have been updated to install the newer version of org so a simple installation should be good enough to get the newer version.
(use-package org-roam :straight t) On installing v2 for the first time, there&amp;rsquo;ll be warning showing the change of the version.</description><content>&lt;p>&lt;code>org-roam&lt;/code> recently moved to v2 and introduced many breaking changes. This provided me an opportunity to do a much needed writeover for &lt;code>org-roam&lt;/code> configuration. I&amp;rsquo;m going to try and implement a workflow similar to Jethro&amp;rsquo;s, as a starting step.&lt;/p>
&lt;h2 id="installing">Installing&lt;/h2>
&lt;p>All the package repository recipies have been updated to install the newer version of org so a simple installation should be good enough to get the newer version.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">(use-package org-roam
:straight &lt;span style="color:#66d9ef">t&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>On installing v2 for the first time, there&amp;rsquo;ll be warning showing the change of the version. It shows the steps to migrate an existing roam database to the newer version but I think I&amp;rsquo;ll be doing a completely new setup. For reference, the warning would be&lt;/p>
&lt;blockquote>
&lt;hr>
&lt;p>WARNING: You’re now on Org-roam v2!&lt;/p>
&lt;hr>
&lt;p>You may have arrived here from a package upgrade. Please read the
wiki entry at
&lt;a href="https://github.com/org-roam/org-roam/wiki/Hitchhiker%E2%80%99s-Rough-Guide-to-Org-roam-V2">https://github.com/org-roam/org-roam/wiki/Hitchhiker%E2%80%99s-Rough-Guide-to-Org-roam-V2&lt;/a>
for an overview of the major changes.&lt;/p>
&lt;p>Notes taken in v1 are incompatible with v2, but you can upgrade
them to the v2 format via a simple command. To migrate your
notes, first make sure you’re on at least Org 9.4 (check with
C-h v org-version) and set your org-roam-directory to your notes:&lt;/p>
&lt;p>(setq org-roam-directory &amp;ldquo;path/to/org/files&amp;rdquo;)&lt;/p>
&lt;p>then, run:&lt;/p>
&lt;p>M-x org-roam-migrate-wizard&lt;/p>
&lt;p>If you wish to stay on v1, v1 is unfortunately not distributed on
MELPA. See org-roam/org-roam-v1 on GitHub on how to install v1.&lt;/p>
&lt;p>If you’ve gone through the migration steps (if necessary), and
know what you’re doing set ‘org-roam-v2-ack’ to ‘t’ to disable
this warning. You can do so by adding:&lt;/p>
&lt;p>(setq org-roam-v2-ack t)&lt;/p>
&lt;p>To your init file.&lt;/p>
&lt;/blockquote>
&lt;p>To acknowledge that we do want the newer version, we&amp;rsquo;ll add the variable as suggested in the warning.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">(setq org-roam-v2-ack &lt;span style="color:#66d9ef">t&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="setup">Setup&lt;/h2>
&lt;p>The biggest change in the newer version is that now instead of files, the smallest independent entity is a &lt;code>node&lt;/code> which is defined as &lt;em>any headline or top level file with an ID&lt;/em>. The ids can be created by using the &lt;code>org-id-get-create&lt;/code> function.&lt;/p>
&lt;p>Each link between the nodes use the Org&amp;rsquo;s standard ID link feature.&lt;/p>
&lt;p>First of all, we have to create the directory for roam to create the notes in.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">(make-directory &lt;span style="color:#e6db74">&amp;#34;~/org/roam&amp;#34;&lt;/span> &lt;span style="color:#66d9ef">t&lt;/span>)
(setq org-roam-directory (file-truename &lt;span style="color:#e6db74">&amp;#34;~/org/roam&amp;#34;&lt;/span>))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>org-roam&lt;/code> doesn&amp;rsquo;t have a major mode anymore. Instead, &lt;code>org-roam-setup&lt;/code> is to be used to start roam.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">(org-roam-setup)
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="creating-and-linking-nodes">Creating and Linking Nodes&lt;/h2>
&lt;p>There are 3 main functions for creating/linking the nodes in v2.&lt;/p>
&lt;ol>
&lt;li>&lt;code>org-roam-node-insert&lt;/code> :: Creates a node if it doesn&amp;rsquo;t exist, and inserts a link to he node at point.&lt;/li>
&lt;li>&lt;code>org-roam-node-find&lt;/code> :: Creates a node if it doesn&amp;rsquo;t exist, and visits the node.&lt;/li>
&lt;li>&lt;code>org-roam-capture&lt;/code> :: Creates a node if it doesn&amp;rsquo;t exist, and restores the current window configuration upon completion.&lt;/li>
&lt;/ol>
&lt;p>org-roam builds up on the &lt;code>org-capture&lt;/code> templating system. The default template simply adds a property drawer with an ID and a title to the new file.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">:PROPERTIES:
:ID: 9102114b-61c3-4cce-857d-53bd72d3044a
:END:
#+title: Hello roam v2!
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="org-roam-buffer">Org-roam buffer&lt;/h2>
&lt;p>Instead of the side window, backlinks are now shown in a dedicated org-roam buffer. &lt;code>org-roam-buffer-toggle&lt;/code> launches an org-roam buffer that tracks the node currently at point. The content of this buffer changes depending on the node under point.&lt;/p>
&lt;h2 id="tags">Tags&lt;/h2>
&lt;p>Org-roam uses the same tagging system that org uses. This means that the tags are set by the &lt;code>#+filetags&lt;/code> keyword for the file and as regular org tags for headline level nodes.&lt;/p>
&lt;h2 id="org-roam-protocol">Org-roam protocol&lt;/h2>
&lt;p>&lt;code>org-protocol&lt;/code> provides a way to capture content from external applications like browser. It does it by extending the &lt;code>org-protocol&lt;/code> with 2 protocols: the &lt;code>roam-node&lt;/code> and &lt;code>roam-ref&lt;/code> protocol.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">(use-package org-roam-protocol
:after org-roam)
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="org-protocol-on-linux">org-protocol on Linux&lt;/h3>
&lt;p>First of all, we need to install the &lt;code>org-protocol&lt;/code>. To do that, we first need to create a desktop appplication in &lt;code>~/.local/share/applications/org-protocol.desktop&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">[Desktop Entry]
Name=Org-Protocol
Exec=emacsclient %u
Icon=emacs-icon
Type=Application
Terminal=false
MimeType=x-scheme-handler/org-protocol
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We then associate the &lt;code>org-protocol://&lt;/code> links with the desktop application by running the following command in the shell:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">xdg-mime default org-protocol.desktop x-scheme-handler/org-protocol
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="roam-node-protocol">roam-node protocol&lt;/h3>
&lt;p>The roam-node protocol opens the node with the ID specified &lt;code>node&lt;/code> key (eg. &lt;code>org-protocol://roam-node://roam-node?node=node-id&lt;/code>). &lt;code>org-roam-graph&lt;/code> uses this to make the graph navigable.&lt;/p>
&lt;h3 id="roam-ref-protocol">roam-ref protocol&lt;/h3>
&lt;p>This protocol find or creates a new note with a given &lt;code>roam_key&lt;/code>. This can be used with a javascript bookmarklet in the browser.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">javascript&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#a6e22e">location&lt;/span>.&lt;span style="color:#a6e22e">href&lt;/span> &lt;span style="color:#f92672">=&lt;/span>
&lt;span style="color:#e6db74">&amp;#39;org-protocool://roam-ref?template=r&amp;amp;ref=&amp;#39;&lt;/span>
&lt;span style="color:#f92672">+&lt;/span> encodeURIComponent(&lt;span style="color:#a6e22e">location&lt;/span>.&lt;span style="color:#a6e22e">href&lt;/span>)
&lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;amp;title=&amp;#39;&lt;/span>
&lt;span style="color:#f92672">+&lt;/span> encodeURIComponent(document.&lt;span style="color:#a6e22e">title&lt;/span>)
&lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;amp;body=&amp;#39;&lt;/span>
&lt;span style="color:#f92672">+&lt;/span> encodeURIComponent(window.&lt;span style="color:#a6e22e">getSelection&lt;/span>())
&lt;/code>&lt;/pre>&lt;/div>&lt;p>where &lt;code>template&lt;/code> is the template key for a template in &lt;code>org-roam-capture-ref-templates&lt;/code>. These templates should contain a &lt;code>#+roam_key: ${ref}&lt;/code> in it.&lt;/p>
&lt;h2 id="templating-system">Templating system&lt;/h2>
&lt;p>For templates, the first step is to create a normal org capture template.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">(setq cm/org-agenda-directory (file-truename &lt;span style="color:#e6db74">&amp;#34;~/org/gtd&amp;#34;&lt;/span>))
(setq org-agenda-files cm/org-agenda-directory)
(setq org-capture-templates
&lt;span style="color:#f92672">`&lt;/span>((&lt;span style="color:#e6db74">&amp;#34;i&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Inbox&amp;#34;&lt;/span> entry (file &lt;span style="color:#f92672">,&lt;/span>(&lt;span style="color:#a6e22e">expand-file-name&lt;/span> &lt;span style="color:#e6db74">&amp;#34;inbox.org&amp;#34;&lt;/span> cm/org-agenda-directory))
&lt;span style="color:#f92672">,&lt;/span>(&lt;span style="color:#a6e22e">concat&lt;/span> &lt;span style="color:#e6db74">&amp;#34;* TODO %?\n&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;/Entered on/ %u&amp;#34;&lt;/span>))
(&lt;span style="color:#e6db74">&amp;#34;c&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;org-protocol-capture&amp;#34;&lt;/span> entry (file+olp &lt;span style="color:#f92672">,&lt;/span>(&lt;span style="color:#a6e22e">expand-file-name&lt;/span> &lt;span style="color:#e6db74">&amp;#34;reading_and_writing_inbox.org&amp;#34;&lt;/span> org-roam-directory) &lt;span style="color:#e6db74">&amp;#34;The List&amp;#34;&lt;/span>)
&lt;span style="color:#e6db74">&amp;#34;* TO-READ [[%:link][%:description]]&amp;#34;&lt;/span>
:immediate-finish &lt;span style="color:#66d9ef">t&lt;/span>)))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>For org-roam templates,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">(setq org-roam-capture-templates
&lt;span style="color:#f92672">&amp;#39;&lt;/span>((&lt;span style="color:#e6db74">&amp;#34;d&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;default&amp;#34;&lt;/span> plain
&lt;span style="color:#e6db74">&amp;#34;%?&amp;#34;&lt;/span>
:if-new (file+head &lt;span style="color:#e6db74">&amp;#34;${slug}.org&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;#+TITLE: ${title}\n&amp;#34;&lt;/span>)
:immediate-finish &lt;span style="color:#66d9ef">t&lt;/span>
:unnarrowed &lt;span style="color:#66d9ef">t&lt;/span>)))
(setq org-roam-capture-ref-templates
&lt;span style="color:#f92672">&amp;#39;&lt;/span>((&lt;span style="color:#e6db74">&amp;#34;r&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;ref&amp;#34;&lt;/span> plain &lt;span style="color:#e6db74">&amp;#34;/${body}/&amp;#34;&lt;/span>
:if-new (file+head &lt;span style="color:#e6db74">&amp;#34;${slug}.org&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;+TITLE: ${title}\n&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;+ROAM_KEY: ${ref}\n&amp;#34;&lt;/span>)
:unnarrowed &lt;span style="color:#66d9ef">t&lt;/span>)))
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="using-general-dot-el-to-set-keybindings">Using general.el to set keybindings&lt;/h2>
&lt;p>To add new keymaps and bindings, I&amp;rsquo;m going to use &lt;code>general.el&lt;/code> to create new keybindings.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">(use-package general
:straight &lt;span style="color:#66d9ef">t&lt;/span>
:config
(general-create-definer cm/roam-leader
:prefix &lt;span style="color:#e6db74">&amp;#34;M-o&amp;#34;&lt;/span>)
(cm/roam-leader
&lt;span style="color:#e6db74">&amp;#34;f&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;org-roam-node-find&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;c&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;org-roam-capture&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;i&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;org-roam-node-insert&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;o&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;org-roam-buffer-toggle&lt;/span>)
)
&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>monte-carlo</title><link>https://chahak13.github.io/posts/monte_carlo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/monte_carlo/</guid><description/><content/></item><item><title>Most used keybindings in Emacs</title><link>https://chahak13.github.io/posts/most_used_keybindings_in_emacs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/most_used_keybindings_in_emacs/</guid><description> Keybinding Function New binding (?) C-x C-f find-file C-x b switch-buffer C-x C-b ibuffer-other-window C-x p p projectile-switch-project M-o f org-roam-node-find M-o o org-roam-buffer-toggle M-o i org-roam-node-insert C-a beginning-of-visual-line C-e move-end-of-line org-end-of-line</description><content>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Keybinding&lt;/th>
&lt;th>Function&lt;/th>
&lt;th>New binding (?)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>C-x C-f&lt;/td>
&lt;td>find-file&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>C-x b&lt;/td>
&lt;td>switch-buffer&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>C-x C-b&lt;/td>
&lt;td>ibuffer-other-window&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>C-x p p&lt;/td>
&lt;td>projectile-switch-project&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>M-o f&lt;/td>
&lt;td>org-roam-node-find&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>M-o o&lt;/td>
&lt;td>org-roam-buffer-toggle&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>M-o i&lt;/td>
&lt;td>org-roam-node-insert&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>C-a&lt;/td>
&lt;td>beginning-of-visual-line&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>C-e&lt;/td>
&lt;td>move-end-of-line&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>org-end-of-line&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></content></item><item><title>Movies Every Physics Student Should Watch</title><link>https://chahak13.github.io/posts/movies_every_physics_student_should_watch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/movies_every_physics_student_should_watch/</guid><description>A list of movies that should be added to the to-watch list
Primer The Theory of Everything Hawking Infinity Copenhagen Interstellar Coherence Einstein and Eddington Predestination A Serious Man Contact 2001: A Space Odyssey Gravity Flatland: The Movie October Sky Back To The Future The Martian Marie Curie: More Than Meets the Eye Particle Fever Apollo 13</description><content>&lt;p>A list of movies that should be added to the to-watch list&lt;/p>
&lt;h2 id="primer">Primer&lt;/h2>
&lt;h2 id="the-theory-of-everything">The Theory of Everything&lt;/h2>
&lt;h2 id="hawking">Hawking&lt;/h2>
&lt;h2 id="infinity">Infinity&lt;/h2>
&lt;h2 id="copenhagen">Copenhagen&lt;/h2>
&lt;h2 id="interstellar">Interstellar&lt;/h2>
&lt;h2 id="coherence">Coherence&lt;/h2>
&lt;h2 id="einstein-and-eddington">Einstein and Eddington&lt;/h2>
&lt;h2 id="predestination">Predestination&lt;/h2>
&lt;h2 id="a-serious-man">A Serious Man&lt;/h2>
&lt;h2 id="contact">Contact&lt;/h2>
&lt;h2 id="2001-a-space-odyssey">2001: A Space Odyssey&lt;/h2>
&lt;h2 id="gravity">Gravity&lt;/h2>
&lt;h2 id="flatland-the-movie">Flatland: The Movie&lt;/h2>
&lt;h2 id="october-sky">October Sky&lt;/h2>
&lt;h2 id="back-to-the-future">Back To The Future&lt;/h2>
&lt;h2 id="the-martian">The Martian&lt;/h2>
&lt;h2 id="marie-curie-more-than-meets-the-eye">Marie Curie: More Than Meets the Eye&lt;/h2>
&lt;h2 id="particle-fever">Particle Fever&lt;/h2>
&lt;h2 id="apollo-13">Apollo 13&lt;/h2></content></item><item><title>nalepae/pandarallel: A simple and efficient tool to parallelize Pandas operations on all available CPUs</title><link>https://chahak13.github.io/posts/nalepae_pandarallel_a_simple_and_efficient_tool_to_parallelize_pandas_operations_on_all_available_cpus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/nalepae_pandarallel_a_simple_and_efficient_tool_to_parallelize_pandas_operations_on_all_available_cpus/</guid><description/><content/></item><item><title>Notes on: Salmani, M., van den Driessche, P., ,Department of Mathematics, Statistics, U. o. V., ,Department of Mathematics, &amp; Statistics, U. o. V. (2006): A model for disease transmission in a patchy environment</title><link>https://chahak13.github.io/posts/salmanimodeldiseasetransmission2006/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/salmanimodeldiseasetransmission2006/</guid><description>SEIRS model They use a standard SEIRS Model with mobility from different patches added.
Well posedness of model It is fairly easy to show the well posedness of the model by showing the non-decreasing nature of the ODE of the system. The upper bound is shown by summing all equations for S, E, I and R, and showing that dN/dt ≤ 0 if N = A/d.</description><content>&lt;h2 id="seirs-model">SEIRS model&lt;/h2>
&lt;p>They use a standard SEIRS Model with mobility from different patches added.&lt;/p>
&lt;h2 id="well-posedness-of-model">Well posedness of model&lt;/h2>
&lt;p>It is fairly easy to show the well posedness of the model by showing the non-decreasing nature of the ODE of the system. The upper bound is shown by summing all equations for S, E, I and R, and showing that dN/dt ≤ 0 if N = A/d.&lt;/p></content></item><item><title>org-mode</title><link>https://chahak13.github.io/posts/org_mode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/org_mode/</guid><description/><content/></item><item><title>Org-roam User Manual</title><link>https://chahak13.github.io/posts/org_roam_user_manual/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/org_roam_user_manual/</guid><description/><content/></item><item><title>org-roam-capture</title><link>https://chahak13.github.io/posts/org_roam_capture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/org_roam_capture/</guid><description>This note was created using org-roam-capture to test its usage</description><content>&lt;p>This note was created using &lt;code>org-roam-capture&lt;/code> to test its usage&lt;/p></content></item><item><title>Pipenv in emacs</title><link>https://chahak13.github.io/posts/pipenv_in_emacs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/pipenv_in_emacs/</guid><description>org-mode is a really good and powerful interface for literate programming. It also forms a good substitute for Jupyter notebooks when collaboration isn&amp;rsquo;t particularly required on the project. Though, there is one problem that occurs when using python in org-mode - it uses the default system-wide python installation for running the code-blocks. Since using python for various projects requires using virtual environments, it becomes essential to be able to use them inside org-mode.</description><content>&lt;p>&lt;code>org-mode&lt;/code> is a really good and powerful interface for literate programming. It also forms a good substitute for Jupyter notebooks when collaboration isn&amp;rsquo;t particularly required on the project. Though, there is one problem that occurs when using python in org-mode - it uses the default system-wide python installation for running the code-blocks. Since using python for various projects requires using virtual environments, it becomes essential to be able to use them inside org-mode. I use &lt;a href="https://pipenv.pypa.io/en/latest/">pipenv&lt;/a> for managing my virtual environments. To use that in emacs, I found the &lt;a href="https://github.com/pwalsh/pipenv.el">pipenv.el&lt;/a> package that seems to provide all the necessary functionalities to use pipenv in emacs. It can be installed using &lt;code>straight.el&lt;/code> directly&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp"> (use-package pipenv
:straight &lt;span style="color:#66d9ef">t&lt;/span>
:hook ((python-mode-hook &lt;span style="color:#f92672">.&lt;/span> pipenv-mode)
(org-mode-hook &lt;span style="color:#f92672">.&lt;/span> pipenv-mode))
)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This enables the &lt;code>pipenv-mode&lt;/code> minor mode while using &lt;code>python-mode&lt;/code> or &lt;code>org-mode&lt;/code>. This should provide functions like &lt;code>pipenv-activate&lt;/code> and &lt;code>pipenv-deactivate&lt;/code> to activate the required virtual environment and &lt;code>pipenv-install&lt;/code> to install any package and add it to the &lt;code>Pipfile&lt;/code>.&lt;/p>
&lt;p>When I enabled the &lt;code>pipenv-mode&lt;/code> minor mode and ran &lt;code>M-x pipenv-activate&lt;/code> in a directory that contained a &lt;code>Pipfile&lt;/code>, it showed me an error &lt;code>Searching for program: No such file or directory, pipenv&lt;/code>. I tried restarting the emacs session but it did not work.&lt;/p>
&lt;h2 id="getting-pipenv-to-work">Getting pipenv to work&lt;/h2>
&lt;p>After running into the issue, I decided going into the source code to see what&amp;rsquo;s going wrong. First important thing that I noticed was that the function &lt;code>pipenv-activate&lt;/code> checks if the current directory or any of its parent directory is a pipenv project via the &lt;code>pipenv-project?&lt;/code> function. This is done using the &lt;code>locate-dominating-file&lt;/code> function and returns the path to the first found directory that contains &lt;code>Pipfile&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp"> (defun pipenv-project? ()
&lt;span style="color:#e6db74">&amp;#34;Are we in a Pipenv project?&amp;#34;&lt;/span>
(locate-dominating-file default-directory &lt;span style="color:#e6db74">&amp;#34;Pipfile&amp;#34;&lt;/span>))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>pipenv-activate&lt;/code> then waits for the &lt;code>pipenv-venv&lt;/code> function to return the path to the virtual environment for the current project. On trying this function on a file in a pipenv project, I found out that it was this function that was throwing the error. This also made the error more clear as I realised that it is trying to run the &lt;code>pipenv --venv&lt;/code> command and couldn&amp;rsquo;t find the &lt;code>pipenv&lt;/code> executable. On further inspection, I found out that the &lt;code>pipenv&lt;/code> executable was in &lt;code>~/.local/bin/&lt;/code> which was not in the emacs &lt;code>exec-path&lt;/code> variable. So, adding this path should potentially resolve this issue.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp"> (add-to-list &lt;span style="color:#e6db74">&amp;#39;exec-path&lt;/span> &lt;span style="color:#e6db74">&amp;#34;~/.local/bin&amp;#34;&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Yay! &lt;code>pipenv-activate&lt;/code> works now :)&lt;/p></content></item><item><title>python</title><link>https://chahak13.github.io/posts/python/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/python/</guid><description>e:PROPERTIES: :ID: b8d95e76-b898-4de9-9379-a1a30398ada0
:END:</description><content>&lt;p>e:PROPERTIES:
:ID: b8d95e76-b898-4de9-9379-a1a30398ada0&lt;/p>
&lt;p>:END:&lt;/p></content></item><item><title>Setup for org-roam and its compatriots</title><link>https://chahak13.github.io/posts/org_roam/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/org_roam/</guid><description>org-roam is an Emacs package that improves note-taking process in org-mode. Per the manual, Org-roam is a tool for network thought. I&amp;rsquo;ve been trying to get into the habit of note-taking and the result of extreme boredom led me to set this up in my system after hearing a lot of good things about it. The complete config block for init.el can be found at the end.
Zettelkasten Zettelkasten is a German word, and the name of a note taking system that was developed by a German sociologist Niklas Luhmann who used to take notes on cards and then put them into a slip-box.</description><content>&lt;p>&lt;code>org-roam&lt;/code> is an Emacs package that improves note-taking process in &lt;code>org-mode&lt;/code>. Per the manual, &lt;em>Org-roam is a tool for network thought&lt;/em>. I&amp;rsquo;ve been trying to get into the habit of note-taking and the result of extreme boredom led me to set this up in my system after hearing a lot of good things about it. The complete config block for init.el can be found at the end.&lt;/p>
&lt;h2 id="zettelkasten">Zettelkasten&lt;/h2>
&lt;p>&lt;code>Zettelkasten&lt;/code> is a German word, and the name of a note taking system that was developed by a German sociologist &lt;strong>Niklas Luhmann&lt;/strong> who used to take notes on cards and then put them into a slip-box. The idea is that, with enough notes linked to each other, one can come up with various ideas to think, write, watch about. This introduction is, by no means, a good introduction and one should definitely read about Zettelkasten on their own if they find it interesting. &lt;code>org-roam&lt;/code> aims to be the slip-box, where every note is a zettel/card of its own.&lt;/p>
&lt;h3 id="fleeting-notes">Fleeting notes&lt;/h3>
&lt;p>Notes that are essentially short quick reminders of information or ideas that need to be processed later on, or trashed. I have tried using &lt;code>org-capture&lt;/code> for this with a decent amount of success but I plan to try &lt;code>org-roam&lt;/code>&amp;rsquo;s daily notes feature first to have a comparison. These kinds of notes are a central inbox that are to be further refiled and processed into permanent notes.&lt;/p>
&lt;h3 id="permanent-notes">Permanent notes&lt;/h3>
&lt;p>Permanent notes form the basic structure of the network of notes. They are full-fledged notes that are supposed to be self-explanatory, and can be of two types: &lt;strong>literature notes&lt;/strong> and &lt;strong>concept notes&lt;/strong>.&lt;/p>
&lt;h4 id="literature-notes">Literature notes&lt;/h4>
&lt;p>Each note is a condensed summary of a particular source of reading (eg. book, website, paper etc.). It can also contain any annotations that are made during the reading. These notes provide an easy access to sift through past readings, and provides a way to retain more consumed information.&lt;/p>
&lt;h4 id="concept-notes">Concept notes&lt;/h4>
&lt;p>Concept notes are more in-depth and require more care in authoring. They need to be detailed notes on a particular concept that one can refer to whenever required. They can then be linked to various fleeting or literature notes, which provides a better network of view for that particular concept.&lt;/p>
&lt;h2 id="installation">Installation&lt;/h2>
&lt;p>I used the &lt;code>straight.el&lt;/code> package manager, with the &lt;code>use-package&lt;/code> package as a configuration manager to install and customize &lt;code>org-roam&lt;/code> and other packages. This can be done by running the following&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp"> (use-package org-roam
:straight &lt;span style="color:#66d9ef">t&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>org-roam&lt;/code> needs &lt;code>sqlite3&lt;/code> to work. Please make sure that it is installed and available to emacs (Check &lt;code>exec-path&lt;/code> variable)&lt;/p>
&lt;h2 id="getting-started">Getting started&lt;/h2>
&lt;p>The first step to start using &lt;code>org-roam&lt;/code> is to set the &lt;code>org-roam-directory&lt;/code> variable. This directory will contain all the notes that are created during the time of using &lt;code>org-roam&lt;/code>. We will set this using the &lt;code>:config&lt;/code> block in &lt;code>use-package&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp"> (use-package org-roam
:straight &lt;span style="color:#66d9ef">t&lt;/span>
:config
(setq org-roam-directory &lt;span style="color:#e6db74">&amp;#34;~/org&amp;#34;&lt;/span>))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Org-roam manual recommends using a flat hierarchy to store all the notes, instead of creating a folder hierarchy. I wasn&amp;rsquo;t sure how I felt about that but I decided to go with it anyway. Instead of any form of explicit categorization, links established between the notes should provide a form of grouping.&lt;/p>
&lt;p>The next step is to enable the minor mode &lt;code>org-roam-mode&lt;/code> globally. While this sets up Emacs with several hooks, it is not enabled on startup. To do that, we&amp;rsquo;ll add a hook to the &lt;code>use-package&lt;/code> block we&amp;rsquo;ve been building.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp"> (use-package org-roam
:straight &lt;span style="color:#66d9ef">t&lt;/span>
:hook
((after-init-hook &lt;span style="color:#f92672">.&lt;/span> org-roam-mode))
:config
(setq org-roam-directory &lt;span style="color:#e6db74">&amp;#34;~/org-roam&amp;#34;&lt;/span>))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>To build the note cache manually, one needs to use &lt;code>M-x org-roam-db-build-cache&lt;/code>. Cache builds might take a while in the first run, but is often very quick in subsequent runs because it only reprocesses modified files.&lt;/p>
&lt;p>To start taking notes, one of the two functions can be used &lt;code>org-roam-find-file&lt;/code> or &lt;code>org-roam-capture&lt;/code>. While both of them will create a new file with the provided title, the major difference is that &lt;code>org-roam-find-file&lt;/code> will point to the newly created note in the buffer, while &lt;code>org-roam-capture&lt;/code> will point the user back to the original buffer, similar to &lt;code>org-capture&lt;/code>.&lt;/p>
&lt;p>To insert links in a note, use &lt;code>M-x org-roam-insert&lt;/code>. This will bring up a prompt with a list of titles for existing notes. Selecting an existing entry will create and insert a link to the current file. Entering a non-existent title will create a new note with that title and link it. Org-roam recommends liberal linking of files, facilitating build up of a denser graph of inter-connected notes. To toggle the visibility of backlinks of a note, along with some context, call &lt;code>M-x org-roam&lt;/code>.&lt;/p>
&lt;h2 id="files">Files&lt;/h2>
&lt;p>While the bulk of &lt;code>org-roam&lt;/code>&amp;rsquo;s functionality is built up on vanilla org, it adds some extensions and keywords to support additional functionality.&lt;/p>
&lt;h3 id="file-titles">File Titles&lt;/h3>
&lt;p>Each note needs to be prescribed with a title (duh?). This allows quick searching of notes. &lt;code>org-roam&lt;/code> adds to the standard &lt;code>+title&lt;/code> keyword in org-mode by using an new keyword called &lt;code>#+roam_alias&lt;/code>. These aliases are space-delimited quoted strings that can also be used to refer the note while using &lt;code>org-roam&lt;/code>. It also provides support for extracting title from the first headline in the file. The default action is to determine titles using &lt;code>#+title&lt;/code> and &lt;code>#+roam_alias&lt;/code> and if &lt;code>#+title&lt;/code> isn&amp;rsquo;t available, then fallback to the first headline. This is useful in topics like &amp;ldquo;World War 2&amp;rdquo; where it can also be referred to as &amp;ldquo;WW2&amp;rdquo; or &amp;ldquo;World War II&amp;rdquo; or such.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text"> #+title: World War 2
#+roam_alias: &amp;#34;WWII&amp;#34; &amp;#34;WW2&amp;#34; &amp;#34;World War II&amp;#34;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Title extraction can be customized using the &lt;code>org-roam-title-sources&lt;/code> variable.&lt;/p>
&lt;h3 id="file-tags">File Tags&lt;/h3>
&lt;p>Tags are used as meta-data for files. They facilitate interaction with notes where titles are insufficient. It also provides a good interface for categorization of notes, especially while searching through all notes. By default, tags are extracted from the &lt;code>#+roam_tags&lt;/code> property. Tags are space-delimited quoted strings. To customize this behaviour, check &lt;code>org-roam-tag-sources&lt;/code> variable.&lt;/p>
&lt;p>&lt;strong>DOUBT&lt;/strong>: The screenshots show a &lt;code>- tags ::&lt;/code> directive. Need to confirm what works.&lt;/p>
&lt;h3 id="file-refer">File Refer&lt;/h3>
&lt;p>Refs are unique identifiers for files. They are declared using the &lt;code>+roam_key&lt;/code> and show up as a Ref Backlink in the org-roam link list.&lt;/p>
&lt;h2 id="templates">Templates&lt;/h2>
&lt;p>Org-roam extends the &lt;code>org-capture&lt;/code> capabilities for its templating system. Org-roam&amp;rsquo;s capture templates are not completely compatible with &lt;code>org-capture&lt;/code>, hence, to modify the templates, use the &lt;code>org-roam-capture-templates&lt;/code>. An example template is shown below. This can be added in the &lt;code>:config&lt;/code> section of the &lt;code>use-package&lt;/code> configuration.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp"> (setq org-roam-capture-templates
&lt;span style="color:#f92672">&amp;#39;&lt;/span>((&lt;span style="color:#e6db74">&amp;#34;d&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;default&amp;#34;&lt;/span> plain (function org-roam--capture-get-point)
&lt;span style="color:#e6db74">&amp;#34;%?&amp;#34;&lt;/span>
:file-name &lt;span style="color:#e6db74">&amp;#34;%&amp;lt;%Y%m%d%H%M%S&amp;gt;-${slug}&amp;#34;&lt;/span>
:head &lt;span style="color:#e6db74">&amp;#34;#+TITLE: ${title}\n&amp;#34;&lt;/span>
:unnarrowed &lt;span style="color:#66d9ef">t&lt;/span>)
(&lt;span style="color:#e6db74">&amp;#34;p&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;paper&amp;#34;&lt;/span> entry (function org-roam--capture-get-point)
&lt;span style="color:#e6db74">&amp;#34;%?&amp;#34;&lt;/span>
:file-name &lt;span style="color:#e6db74">&amp;#34;%&amp;lt;%Y%m%d%H%M%S&amp;gt;-${slug}&amp;#34;&lt;/span>
:head &lt;span style="color:#e6db74">&amp;#34;#+TITLE: ${title}\n#+AUTHOR: ${authors}\n&amp;#34;&lt;/span>
:unnarrowed &lt;span style="color:#66d9ef">t&lt;/span>)
))
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="inserting-links">Inserting Links&lt;/h2>
&lt;p>&lt;code>file&lt;/code> links for files and &lt;code>id&lt;/code> links for headlines are preferred as they ensure that the links will work even without &lt;code>org-roam&lt;/code>. &lt;code>file&lt;/code> links can be inserted using &lt;code>org-roam-insert&lt;/code> whereas links to headlines can be inserted by navigating to the headline and calling &lt;code>org-store-link&lt;/code> to store an ID and link into the org-roam database. That link can then be inserted via &lt;code>org-insert-link&lt;/code>.&lt;/p>
&lt;p>Org-roam also extends org linking syntax by adding &lt;code>roam&lt;/code> links. Org-roam registers this link type, and interprets the path as follows:&lt;/p>
&lt;ul>
&lt;li>&lt;code>[[roam:title]]&lt;/code>: links to an org-roam file with title or alias as &amp;ldquo;title&amp;rdquo;.&lt;/li>
&lt;li>&lt;code>[[roam:*headline]]&lt;/code>: links to the headline &amp;ldquo;headline&amp;rdquo; in the current org-roam file.&lt;/li>
&lt;li>&lt;code>[[roam:title*headline]]&lt;/code>: links to the headline &amp;ldquo;headline&amp;rdquo; in the org-roam file with title or alias &amp;ldquo;title&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;h2 id="graphing">Graphing&lt;/h2>
&lt;p>&lt;code>org-roam-server&lt;/code> is basically a web application to visualize the org-roam database. It needs to be installed separately and can be done easily using &lt;code>straight.el&lt;/code> and &lt;code>use-package&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp"> (use-package org-roam-server
:straight &lt;span style="color:#66d9ef">t&lt;/span>
:config
(setq org-roam-server-host &lt;span style="color:#e6db74">&amp;#34;127.0.0.1&amp;#34;&lt;/span>)
(setq org-roam-server-port &lt;span style="color:#ae81ff">8080&lt;/span>)
(setq org-roam-server-authenticate &lt;span style="color:#66d9ef">nil&lt;/span>)
(setq org-roam-server-export-inline-images &lt;span style="color:#66d9ef">t&lt;/span>)
(setq org-roam-server-serve-files &lt;span style="color:#66d9ef">nil&lt;/span>)
(setq org-roam-server-served-file-extensions &lt;span style="color:#f92672">&amp;#39;&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;pdf&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;mp4&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;ogv&amp;#34;&lt;/span>))
(setq org-roam-server-network-poll &lt;span style="color:#66d9ef">t&lt;/span>)
(setq org-roam-server-network-arrows &lt;span style="color:#66d9ef">nil&lt;/span>)
(setq org-roam-server-network-label-truncate &lt;span style="color:#66d9ef">t&lt;/span>)
(setq org-roam-server-network-label-truncate-length &lt;span style="color:#ae81ff">60&lt;/span>)
(setq org-roam-server-network-label-wrap-length &lt;span style="color:#ae81ff">20&lt;/span>)
(org-roam-server-mode)
)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>org-roam-server-mode&lt;/code> will enable the global mode. This will start a web server on &lt;a href="http://127.0.0.1:8080">http://127.0.0.1:8080&lt;/a> that can be accessed for the org-roam visualization. To open the note on clicking a node, the &lt;code>org-roam-protocol&lt;/code> needs to be set up, which is done in the next section.&lt;/p>
&lt;h2 id="roam-protocol">Roam protocol&lt;/h2>
&lt;p>To enable org-roam&amp;rsquo;s protocol extensions, add the following to emacs init file&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp"> (use-package org-roam-protocol
:after org-roam)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>I had to make a desktop application file for &lt;code>emacsclient&lt;/code> to use &lt;code>org-protocol&lt;/code>. It can be made on Linux platforms by creating a file in &lt;code>~/.local/share/applications/&lt;/code> directory. An example file is shown below&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text"> [Desktop Entry]
Name=Org-Protocol
Exec=emacsclient %u
Icon=emacs-icon
Type=Application
Terminal=false
MimeType=x-scheme-handle/org-protocol
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="the-roam-ref-protocol">The &lt;code>roam-ref&lt;/code> Protocol&lt;/h3>
&lt;p>This protocol finds or creates a new note with a given &lt;code>roam_key&lt;/code>. This is one of the most appealing features of &lt;code>org-roam&lt;/code> for me. I&amp;rsquo;m guessing that this in conjunction with Zotero will make my note-taking life much easier on the web. To use this, a bookmarklet needs to be created in the browser. For my choice, that is currently Firefox. The steps to create a bookmarklet are&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Add a new bookmark from the bookmarks toolbar.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>In the name field, add the required name for the bookmark.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>In the location field, add the following code&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript"> &lt;span style="color:#a6e22e">javascript&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#a6e22e">location&lt;/span>.&lt;span style="color:#a6e22e">href&lt;/span> &lt;span style="color:#f92672">=&lt;/span>
&lt;span style="color:#e6db74">&amp;#39;org-protocol://roam-ref?template=w&amp;amp;ref=&amp;#39;&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">​&lt;/span> &lt;span style="color:#f92672">+&lt;/span> encodeURIComponent(&lt;span style="color:#a6e22e">location&lt;/span>.&lt;span style="color:#a6e22e">href&lt;/span>)
&lt;span style="color:#960050;background-color:#1e0010">​&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;amp;title=&amp;#39;&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">​&lt;/span> &lt;span style="color:#f92672">+&lt;/span> encodeURIComponent(document.&lt;span style="color:#a6e22e">title&lt;/span>)
&lt;span style="color:#960050;background-color:#1e0010">​&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;amp;body=&amp;#39;&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">​&lt;/span> &lt;span style="color:#f92672">+&lt;/span> encodeURIComponent(window.&lt;span style="color:#a6e22e">getSelection&lt;/span>())
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;p>Here, &lt;code>template&lt;/code> is the template key for a template in &lt;code>org-roam-capture-ref-templates&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp"> (setq org-roam-capture-ref-templates
&lt;span style="color:#f92672">&amp;#39;&lt;/span>((&lt;span style="color:#e6db74">&amp;#34;r&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;ref&amp;#34;&lt;/span> plain (function org-roam-capture--get-point)
&lt;span style="color:#e6db74">&amp;#34;%?&amp;#34;&lt;/span>
:file-name &lt;span style="color:#e6db74">&amp;#34;%&amp;lt;%Y%m%d%H%M%S&amp;gt;-${slug}&amp;#34;&lt;/span>
:head &lt;span style="color:#e6db74">&amp;#34;#+TITLE: ${title}\n#+roam_key: ${ref}&amp;#34;&lt;/span>
:unnarrowed &lt;span style="color:#66d9ef">t&lt;/span>)
(&lt;span style="color:#e6db74">&amp;#34;w&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;webpage&amp;#34;&lt;/span> plain (function org-roam--capture-get-point)
&lt;span style="color:#e6db74">&amp;#34;/${body}/&amp;#34;&lt;/span>
:file-name &lt;span style="color:#e6db74">&amp;#34;%&amp;lt;%Y%m%d%H%M%S&amp;gt;-${slug}&amp;#34;&lt;/span>
:head &lt;span style="color:#e6db74">&amp;#34;#+TITLE: ${title}\n#+roam_key: ${ref}\n\n&amp;#34;&lt;/span>
:unnarrowed &lt;span style="color:#66d9ef">t&lt;/span>)
))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, I can simply click on this bookmarklet from whatever website/article I am looking at, to directly create a note in emacs using org-roam. With the &lt;code>webpage&lt;/code> template, I write down the selected text from the browser into the top of the body of the note, in italics.&lt;/p>
&lt;h2 id="daily-notes">Daily-notes&lt;/h2>
&lt;p>Org-roam provides functions similar to org-journal. I decided to stick to org-roam for the daily notes too, to keep all the notes under one umbrella. To configure daily notes, there are 2 main variables: &lt;code>org-roam-dailies-directory&lt;/code> and &lt;code>org-roam-dailies-capture-templates&lt;/code>. They are the path to the daily-notes and the capture templates for daily notes respectively. A sane default config taken directly from the manual is&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp"> (setq org-roam-dailies-directory &lt;span style="color:#e6db74">&amp;#34;daily/&amp;#34;&lt;/span>)
(setq org-roam-dailies-capture-templates
&lt;span style="color:#f92672">&amp;#39;&lt;/span>((&lt;span style="color:#e6db74">&amp;#34;d&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;default&amp;#34;&lt;/span> entry (function org-roam--capture-get-point)
&lt;span style="color:#e6db74">&amp;#34;* #?&amp;#34;&lt;/span>
:file-name &lt;span style="color:#e6db74">&amp;#34;daily/%&amp;lt;%Y-%m-%d&amp;gt;&amp;#34;&lt;/span>
:head &lt;span style="color:#e6db74">&amp;#34;#+TITLE: %&amp;lt;%Y-%m-%d&amp;gt;\n\n&amp;#34;&lt;/span>)))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>org-roam-dailies-directory&lt;/code> should appear in the &lt;code>:file-name&lt;/code> for the notes to be recognized as daily-notes.&lt;/p>
&lt;p>To start writing daily-notes, call the &lt;code>org-roam-dailies-capture-today&lt;/code> function. It creates an entry in the notes for today. &lt;code>org-roam-dailies-find-today&lt;/code> finds the note for today, creating it if necessary. Another important function that can be used for searching is the &lt;code>org-roam-dailies-find-date&lt;/code> which will open the note for the particular date using a calendar.&lt;/p>
&lt;p>Other functions to keep in mind:&lt;/p>
&lt;ul>
&lt;li>&lt;code>org-roam-dailies-find-directory&lt;/code>&lt;/li>
&lt;li>&lt;code>org-roam-dailies-find-previous-note&lt;/code>&lt;/li>
&lt;li>&lt;code>org-roam-dailies-find-next-note&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="diagnosing-and-repairing-files">Diagnosing and Repairing Files&lt;/h2>
&lt;p>Once in a while, it would be a good idea to check for the correctness of the links. To do this easily, org-roam provides the &lt;code>org-roam-doctor&lt;/code> function. This function checks the links in the current org-roam buffer. To run it on all files, use &lt;code>C-u M-x org-roam-doctor&lt;/code> but this might take some time.&lt;/p>
&lt;h2 id="finding-unlinked-references">Finding Unlinked References&lt;/h2>
&lt;p>It is difficult, and pointless to an extent, to try and remember all the notes to link to. For some such cases, org-roam has the &lt;code>org-roam-unlinked-references&lt;/code>. It tries to find strings in the current buffer that match the title or aliases of any existing note in the org-roam database. These can then be converted to new links.&lt;/p>
&lt;p>&lt;strong>PS&lt;/strong>: Using this requires &lt;a href="https://github.com/BurntSushi/ripgrep">ripgrep&lt;/a> with PCRE support installed on the system.&lt;/p>
&lt;h2 id="deft-org-noter-org-roam-bibtex">&lt;!-- raw HTML omitted -->NEXT&lt;!-- raw HTML omitted --> Deft, org-noter, org-roam-bibtex&lt;/h2>
&lt;h3 id="deft">Deft&lt;/h3>
&lt;p>&lt;code>deft&lt;/code> is an interface for enhanced searching and filtering of notes. This provides a better interface to quickly go to a required note as it searches both, title and body of the note. It can be installed directly from MELPA and is fairly easy to get started with.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp"> (use-package deft
:straight &lt;span style="color:#66d9ef">t&lt;/span>
:bind
(&lt;span style="color:#e6db74">&amp;#34;&amp;lt;f8&amp;gt;&amp;#34;&lt;/span> &lt;span style="color:#f92672">.&lt;/span> deft)
:config
(setq deft-directory &lt;span style="color:#e6db74">&amp;#34;~/org-roam&amp;#34;&lt;/span>)
(setq deft-extensions &lt;span style="color:#f92672">&amp;#39;&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;org&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;md&amp;#34;&lt;/span>))
)
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="keybindings-for-org-roam-functions">Keybindings for &lt;code>org-roam&lt;/code> functions&lt;/h2>
&lt;p>I decided to create a keymap for org-roam, and I had heard about the &lt;code>general&lt;/code> package on David Wilson&amp;rsquo;s Emacs-from-scratch series so I decided to give that a shot.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp"> (use-package general
:straight &lt;span style="color:#66d9ef">t&lt;/span>
:config
(general-create-definer cm/leader-keys
:prefix &lt;span style="color:#e6db74">&amp;#34;M-o&amp;#34;&lt;/span>)
(cm/leader-keys
&lt;span style="color:#e6db74">&amp;#34;f&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;org-roam-find-file&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;c&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;org-roam-capture&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;i&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;org-roam-insert&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;o&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;org-roam&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;M-t&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;org-roam-dailies-find-today&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;t&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;org-roam-dailies-capture-today&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;u&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;org-roam-unlinked-references&lt;/span>)
)
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="use-package-code-block">&lt;code>use-package&lt;/code> code block&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp"> (use-package org-roam
:straight &lt;span style="color:#66d9ef">t&lt;/span>
:config
(setq org-roam-directory &lt;span style="color:#e6db74">&amp;#34;~/org-roam&amp;#34;&lt;/span>)
(setq org-roam-capture-templates
&lt;span style="color:#f92672">&amp;#39;&lt;/span>((&lt;span style="color:#e6db74">&amp;#34;d&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;default&amp;#34;&lt;/span> plain (function org-roam--capture-get-point)
&lt;span style="color:#e6db74">&amp;#34;%?&amp;#34;&lt;/span>
:file-name &lt;span style="color:#e6db74">&amp;#34;%&amp;lt;%Y%m%d%H%M%S&amp;gt;-${slug}&amp;#34;&lt;/span>
:head &lt;span style="color:#e6db74">&amp;#34;#+TITLE: ${title}\n&amp;#34;&lt;/span>
:unnarrowed &lt;span style="color:#66d9ef">t&lt;/span>)
(&lt;span style="color:#e6db74">&amp;#34;p&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;paper&amp;#34;&lt;/span> entry (function org-roam--capture-get-point)
&lt;span style="color:#e6db74">&amp;#34;%?&amp;#34;&lt;/span>
:file-name &lt;span style="color:#e6db74">&amp;#34;%&amp;lt;%Y%m%d%H%M%S&amp;gt;-${slug}&amp;#34;&lt;/span>
:head &lt;span style="color:#e6db74">&amp;#34;#+TITLE: ${title}\n#+AUTHOR: ${authors}\n&amp;#34;&lt;/span>
:unnarrowed &lt;span style="color:#66d9ef">t&lt;/span>)
))
)
(use-package org-roam-protocol
:after org-roam
:config
(setq org-roam-capture-ref-templates
&lt;span style="color:#f92672">&amp;#39;&lt;/span>((&lt;span style="color:#e6db74">&amp;#34;r&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;ref&amp;#34;&lt;/span> plain (function org-roam-capture--get-point)
&lt;span style="color:#e6db74">&amp;#34;%?&amp;#34;&lt;/span>
:file-name &lt;span style="color:#e6db74">&amp;#34;%&amp;lt;%Y%m%d%H%M%S&amp;gt;-${slug}&amp;#34;&lt;/span>
:head &lt;span style="color:#e6db74">&amp;#34;#+TITLE: ${title}\n#+roam_key: ${ref}&amp;#34;&lt;/span>
:unnarrowed &lt;span style="color:#66d9ef">t&lt;/span>)
(&lt;span style="color:#e6db74">&amp;#34;w&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;webpage&amp;#34;&lt;/span> plain (function org-roam--capture-get-point)
&lt;span style="color:#e6db74">&amp;#34;/${body}/&amp;#34;&lt;/span>
:file-name &lt;span style="color:#e6db74">&amp;#34;%&amp;lt;%Y%m%d%H%M%S&amp;gt;-${slug}&amp;#34;&lt;/span>
:head &lt;span style="color:#e6db74">&amp;#34;#+TITLE: ${title}\n#+roam_key: ${ref}\n\n&amp;#34;&lt;/span>
:unnarrowed &lt;span style="color:#66d9ef">t&lt;/span>)
))
)
(use-package org-roam-server
:straight &lt;span style="color:#66d9ef">t&lt;/span>
:config
(setq org-roam-server-host &lt;span style="color:#e6db74">&amp;#34;127.0.0.1&amp;#34;&lt;/span>)
(setq org-roam-server-port &lt;span style="color:#ae81ff">8080&lt;/span>)
(setq org-roam-server-authenticate &lt;span style="color:#66d9ef">nil&lt;/span>)
(setq org-roam-server-export-inline-images &lt;span style="color:#66d9ef">t&lt;/span>)
(setq org-roam-server-serve-files &lt;span style="color:#66d9ef">nil&lt;/span>)
(setq org-roam-server-served-file-extensions &lt;span style="color:#f92672">&amp;#39;&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;pdf&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;mp4&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;ogv&amp;#34;&lt;/span>))
(setq org-roam-server-network-poll &lt;span style="color:#66d9ef">t&lt;/span>)
(setq org-roam-server-network-arrows &lt;span style="color:#66d9ef">nil&lt;/span>)
(setq org-roam-server-network-label-truncate &lt;span style="color:#66d9ef">t&lt;/span>)
(setq org-roam-server-network-label-truncate-length &lt;span style="color:#ae81ff">60&lt;/span>)
(setq org-roam-server-network-label-wrap-length &lt;span style="color:#ae81ff">20&lt;/span>)
(org-roam-server-mode)
)
(use-package deft
:straight &lt;span style="color:#66d9ef">t&lt;/span>
:bind
(&lt;span style="color:#e6db74">&amp;#34;&amp;lt;f8&amp;gt;&amp;#34;&lt;/span> &lt;span style="color:#f92672">.&lt;/span> deft)
:config
(setq deft-directory &lt;span style="color:#e6db74">&amp;#34;~/org-roam&amp;#34;&lt;/span>)
(setq deft-extensions &lt;span style="color:#f92672">&amp;#39;&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;org&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;md&amp;#34;&lt;/span>))
)
&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>Stampede2 User Guide - TACC User Portal</title><link>https://chahak13.github.io/posts/stampede2_user_guide_tacc_user_portal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/stampede2_user_guide_tacc_user_portal/</guid><description>System Overview KNL Compute Nodes Stampede2 has 4,200 Knight&amp;rsquo;s Landing (KNL) compute nodes. An overview of the specifications of each node is as follows
Model Intel Xeon Phi 7250 (&amp;ldquo;Knights Landing&amp;rdquo;) Total cores per KNL node 68 cores on a single socket Hardware threads per core 4 Hardware threads per node 68 x 4 = 272 Clock rate 1.</description><content>&lt;h2 id="system-overview">System Overview&lt;/h2>
&lt;h3 id="knl-compute-nodes">KNL Compute Nodes&lt;/h3>
&lt;p>Stampede2 has 4,200 Knight&amp;rsquo;s Landing (KNL) compute nodes. An overview of the specifications of each node is as follows&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Model&lt;/th>
&lt;th>Intel Xeon Phi 7250 (&amp;ldquo;Knights Landing&amp;rdquo;)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Total cores per KNL node&lt;/td>
&lt;td>68 cores on a single socket&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Hardware threads per core&lt;/td>
&lt;td>4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Hardware threads per node&lt;/td>
&lt;td>68 x 4 = 272&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Clock rate&lt;/td>
&lt;td>1.4GHz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>RAM&lt;/td>
&lt;td>96GB DDR4 plus 16GB high-speed MCDRAM. Configurable in two important ways&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Cache&lt;/td>
&lt;td>32KB L1 data cache/core; 1MB L2/two-core tile. In default config, MCDRAM&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>operates as 16GB direct-mapped L3.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>All but 504 KNL nodes have a 107GB &lt;code>/tmp&lt;/code> partition on a 200GB Solid State Drive (SSD). The 504 KNLs originally installed as the Stampede1 KNL sub-system each have a 32GB &lt;code>/tmp&lt;/code> partition on 112GB SSDs. The latter nodes currently make up the development, long and flat-quadrant queues. Size of &lt;code>/tmp&lt;/code> partitions as of 24 Apr 2018.&lt;/p>
&lt;h3 id="skx-compute-nodes">SKX Compute Nodes&lt;/h3>
&lt;p>Stampede2 hosts 1,738 SKX compute nodes.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Model&lt;/th>
&lt;th>Intel Xeon Platinum 8160 (&amp;ldquo;Skylake&amp;rdquo;)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Total cores per KNL node&lt;/td>
&lt;td>48 cores on two socket (24 cores/socket)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Hardware threads per core&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Hardware threads per node&lt;/td>
&lt;td>48 x 2 = 96&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Clock rate&lt;/td>
&lt;td>2.1GHz nominal (1.4-3.7GHz depending on instruction set and number of active cores&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>RAM&lt;/td>
&lt;td>192GB (2.67GHz) DDR4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Cache&lt;/td>
&lt;td>32KB L1 data cache/core; 1MB L2/core. 33MB L2/socket.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Local storage on the SKX compute nodes is in tthe form of 144GB &lt;code>/tmp&lt;/code> partitions on a 200GB SSD.&lt;/p>
&lt;h2 id="file-systems">File Systems&lt;/h2>
&lt;p>Stampede2 mounts three shared Lustre file systems on which each user has account-specific directories for &lt;code>$HOME&lt;/code>, &lt;code>$WORK&lt;/code>, and &lt;code>$SCRATCH&lt;/code>. Each of the file systems are available on all Stampede2 nodes.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>File System&lt;/th>
&lt;th>Quota&lt;/th>
&lt;th>Key Features&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>$HOME&lt;/code>&lt;/td>
&lt;td>10GB; 200,000 files&lt;/td>
&lt;td>&lt;strong>Not intended for parallel or high-intensity file operations&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>Backed up regularly&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>~1PB Overall capacity. 2 Meta-Data Servers, 4 Object Storage Targets&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>Not purged&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$WORK&lt;/code>&lt;/td>
&lt;td>1TB; 3,000,000 files across all&lt;/td>
&lt;td>&lt;strong>Not intended for parallel or high-intensity file operations&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>TACC systems.&lt;/td>
&lt;td>On Global Shared FS mounted on most TACC systems.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;strong>Not backed up&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>Not purged&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$SCRATCH&lt;/code>&lt;/td>
&lt;td>no quota&lt;/td>
&lt;td>Overall ~30PB. 4 Meta-Data Servers. 66 Object Storage Targets&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;strong>Not backed up&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;strong>Files are subject to purge if access time &amp;gt;10 days old&lt;/strong>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;code>$SCRATCH&lt;/code> is a temporary storage space. Files not accessed in last 10 days will be subject to the purging. Reading or executing a file/script will update the access time. &lt;code>ls -ul&lt;/code> can be used to view access times.&lt;/p>
&lt;h2 id="accessing-the-system">Accessing the system&lt;/h2>
&lt;p>Access to all TACC systems requires setting up MFA. This is done using the TACC Token App. This app provides a token for each login, that needs to be given while using ssh.&lt;/p>
&lt;p>&lt;strong>Important:&lt;/strong> &lt;em>If user created TACC account using UT EID, then they&amp;rsquo;ll have to go to the reset password using the email-id provided and create a password that will then be used as a password in ssh.&lt;/em>&lt;/p>
&lt;p>To initiate a stampede2 ssh session, simply use ssh on the command-line.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">ssh &amp;lt;username&amp;gt;@stampede2.tacc.utexas.edu
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If one wants to connect to a specific login node (not sure when would this be required), then the full domain can be used. For example, to log into the second node, use&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">ssh &amp;lt;username&amp;gt;@login2.stampede2.tacc.utexas.edu
&lt;/code>&lt;/pre>&lt;/div>&lt;p>To connect with graphical support (X11), use the normal ssh flags of &lt;code>-X&lt;/code> or &lt;code>-Y&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">ssh -X &amp;lt;username&amp;gt;@stampede2.tacc.utexas.edu
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Important&lt;/strong> &lt;code>ssh-keygen&lt;/code> should &lt;em>NOT&lt;/em> be run on Stampede2. When logging in, it creates the right key-pair by itself.&lt;/p>
&lt;h2 id="using-stampede2">Using Stampede2&lt;/h2>
&lt;p>Stampede2 nodes run &lt;strong>Red Hat Enterprise Linux 7&lt;/strong>.&lt;/p>
&lt;h3 id="configuring-account">Configuring account&lt;/h3>
&lt;h4 id="linux-shell">Linux Shell&lt;/h4>
&lt;p>The default login shell is &lt;strong>bash&lt;/strong>. It can be changed to csh, sh, tcsh, or zsh by submitting a ticket through TACC portal. &lt;code>chsh&lt;/code> command won&amp;rsquo;t work.&lt;/p>
&lt;h4 id="account-level-diagnostics">Account-level Diagnostics&lt;/h4>
&lt;p>TACC has a &lt;code>sanitytool&lt;/code> module that loads an account-level diagnostics package to detect account-level issues. It also provides fixes for the issues. To run the tool, execute the following commands&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ module load sanitytool
$ sanitycheck
&lt;/code>&lt;/pre>&lt;/div>&lt;p>It is a good habit to periodically run &lt;code>sanitycheck&lt;/code> as preventive measure. To read more help on it, run &lt;code>module help sanitytool&lt;/code>.&lt;/p>
&lt;h4 id="file-system-usage-recommendations">File System Usage Recommendations&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>File system&lt;/th>
&lt;th>Best practices&lt;/th>
&lt;th>Best activities&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>$HOME&lt;/td>
&lt;td>cron jobs&lt;/td>
&lt;td>compiling, editing&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>small scripts&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>environment settings&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>$WORK&lt;/td>
&lt;td>store software installations&lt;/td>
&lt;td>staging datasets&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>original datasets that can&amp;rsquo;t be reproduced&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>job scripts and templates&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>$SCRATCH&lt;/td>
&lt;td>&lt;strong>Temporary storage&lt;/strong>&lt;/td>
&lt;td>all job I/O activity&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>I/O files&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>job files&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>temporary datasets&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></content></item><item><title>The Macaroni in 'Yankee Doodle' Is Not What You Think - Atlas Obscura</title><link>https://chahak13.github.io/posts/the_macaroni_in_yankee_doodle_is_not_what_you_think_atlas_obscura/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/the_macaroni_in_yankee_doodle_is_not_what_you_think_atlas_obscura/</guid><description>HN post</description><content>&lt;p>&lt;a href="https://news.ycombinator.com/item?id=27133530">HN post&lt;/a>&lt;/p></content></item><item><title>The unexpected math behind Van Gogh's "Starry Night" - Natalya St. Clair - YouTube</title><link>https://chahak13.github.io/posts/the_unexpected_math_behind_van_gogh_s_starry_night_natalya_st_clair_youtube/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/the_unexpected_math_behind_van_gogh_s_starry_night_natalya_st_clair_youtube/</guid><description/><content/></item><item><title>trapezoidal-rule</title><link>https://chahak13.github.io/posts/trapezoidal_rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/trapezoidal_rule/</guid><description/><content/></item><item><title>Uber's Crazy YOLO App Rewrite, From the Front Seat - The Pragmatic Engineer</title><link>https://chahak13.github.io/posts/uber_s_crazy_yolo_app_rewrite_from_the_front_seat_the_pragmatic_engineer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/uber_s_crazy_yolo_app_rewrite_from_the_front_seat_the_pragmatic_engineer/</guid><description/><content/></item><item><title>zotero workflow into emacs?</title><link>https://chahak13.github.io/posts/zotero_workflow_into_emacs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chahak13.github.io/posts/zotero_workflow_into_emacs/</guid><description>zotero workflow into emacs? is there a facility people use to export plain text to emacs orgmode as part of their research workflow to organise their links and annotations? I heard zotxt is useful, does anyone have opinions on it or of something better?
Comments
Answer 1 There isn&amp;rsquo;t a single tool, but there are numerous packages that might be helpful if you use Zotero and Emacs alongside one another. There are various online tutorials which discuss setting up combinations of these to the individual author&amp;rsquo;s taste.</description><content>&lt;h2 id="zotero-workflow-into-emacs">&lt;a href="https://emacs.stackexchange.com/questions/24725/zotero-workflow-into-emacs">zotero workflow into emacs?&lt;/a>&lt;/h2>
&lt;p>is there a facility people use to export plain text to emacs orgmode as part of their research workflow to organise their links and annotations? I heard zotxt is useful, does anyone have opinions on it or of something better?&lt;/p>
&lt;p>Comments&lt;/p>
&lt;h3 id="answer-1">Answer 1&lt;/h3>
&lt;p>There isn&amp;rsquo;t a single tool, but there are numerous packages that might be helpful if you use Zotero and Emacs alongside one another. There are &lt;a href="http://www.mkbehr.com/posts/a-research-workflow-with-zotero-and-org-mode/">various&lt;/a> &lt;a href="http://iflysib14.iflysib.unlp.edu.ar/tomas/en/blog/reference-management.html">online&lt;/a> &lt;a href="https://tincman.wordpress.com/2011/01/04/research-paper-management-with-emacs-org-mode-and-reftex/">tutorials&lt;/a> which discuss setting up combinations of these to the individual author&amp;rsquo;s taste.
Rather than repeating these, I&amp;rsquo;ll try and give an overview, since it&amp;rsquo;s not completely clear from your question what you&amp;rsquo;d like to do.
Consider first that the &amp;ldquo;research workflow&amp;rdquo;, so far as research literature is concerned, has various steps, such as:
In &amp;ldquo;standard&amp;rdquo; Zotero, Zotero does 1 to 6, and the Zotero word-processor plug-in does 7 and 8.
I&amp;rsquo;d suggest thinking first what you want Emacs to do, and what you like about Zotero. You can manage bibliographies and write scientific papers entirely within Emacs; plenty of people do. Instead of Zotero&amp;rsquo;s database bibliographic information is stored in a Bib(La)Tex (&lt;code>.bib&lt;/code>) file, and citations added to LaTeX, org or markdown files.
But in my view Zotero has particular strengths at 1-4 (adding and managing data) and at 6 (it has a very fast and powerful search tool). Annotating (5) is relatively weak, because the simple text editor is uncomfortable if you&amp;rsquo;re used to Emacs. And if you author your own papers in Emacs you need something that does tasks 7 and 8.
If you&amp;rsquo;re using Emacs side-by-side with Zotero, Emacs needs some way to see what you have in your database. The best way to do this is to export a &lt;code>.bib&lt;/code> file, for which format Emacs has extensive support, from Zotero.
This can be done manually, but packages like &lt;a href="https://github.com/vspinu/zotelo">&lt;code>zotelo&lt;/code>&lt;/a> or the fork &lt;a href="https://gist.github.com/andersjohansson/fa7ca643782771b6e15da41514e1358a">&lt;code>emacs-zotero-bib-fetch&lt;/code>&lt;/a> will allow you to quickly keep the &lt;code>.bib&lt;/code> file up-to-date from within Emacs. &lt;code>zotelo&lt;/code> requires Mozrepl, which is currently &lt;a href="https://github.com/vspinu/zotelo/issues/34">not supported&lt;/a> by Firefox Quantum, so I recommend using &lt;code>emacs-zotero-bib-fetch&lt;/code>.
Once you have a &lt;code>.bib&lt;/code> file, the in-built package &lt;code>reftex&lt;/code>, as well as &lt;a href="https://github.com/jkitchin/org-ref">&lt;code>org-ref&lt;/code>&lt;/a> and &lt;a href="https://github.com/tmalsburg/helm-bibtex">&lt;code>helm-bibtex&lt;/code>&lt;/a> will let you search your bibliographic data. One or both of these latter packages is likely to be very helpful; they do a number of tasks from the list above, including facilities for making notes.
&lt;code>helm-bibtex&lt;/code> is particularly clever at finding PDFs linked to bibliographic items, which you can then open in Emacs. &lt;a href="https://github.com/politza/pdf-tools">&lt;code>pdf-tools&lt;/code>&lt;/a> is an excellent alternative PDF viewer within Emacs. It allows you to view and create annotations within the PDF file. If you like using PDF files this way, the &lt;a href="http://zotfile.com">&lt;code>zotfile&lt;/code>&lt;/a> extension for Zotero can extract annotations automatically into a Zotero note.
&lt;code>helm-bibtex&lt;/code> and &lt;code>org-ref&lt;/code> packages both have facilities for adding notes to bibliographic items. These are stored as org files.
Once I have finished my notes on an item I do &lt;code>C-c C-e h o&lt;/code> to export an HTML version and copy and paste this back into Zotero as a note so that it is searchable. I haven&amp;rsquo;t found a slicker way to do this.
This is partly dependent on what format you write (org, reftex, markdown) and partly dependent on what format you want at the end (PDF, HTML).
Again, both &lt;code>helm-bibtex&lt;/code> and &lt;code>org-ref&lt;/code> as well as &lt;code>reftex&lt;/code> allow inserting citations into documents you are writing of any of these types.
Assuming you are writing in org, there is (not yet) a standard citation syntax, but org-ref provides one. Other people just use the LaTeX citation commands directly in org.
If your primary output target is PDF, then &lt;code>org-mode&lt;/code>&amp;rsquo;s own exporting (via LaTeX) is likely the easiest route.
You mention &lt;code>zotxt&lt;/code>; I haven&amp;rsquo;t used this, but it appears to be a tool for resolving and formatting citations in plain text files, including support for &lt;code>pandoc&lt;/code>. Pandoc markdown &lt;em>does&lt;/em> have a standard citation format and support for resolving and formatting bibliographies (using CSL). Pandoc may be preferable if you want to export primarily to multiple formats (e.g. HTML, markdown).&lt;/p>
&lt;p>Comments:&lt;/p>
&lt;h3 id="answer-2">Answer 2&lt;/h3>
&lt;p>Generally I use emacs' &lt;a href="https://orgmode.org/">org-mode&lt;/a> for organizing projects, tasks, and ideas, but Zotero is helpful for storing resources like PDFs / websites, etc. when researching something. To combine the two, it is nice to be able to link from org-mode to the location within Zotero where a resource is.
&lt;a href="https://zoteromusings.wordpress.com/2013/04/23/zotero-item-uris-from-client/">This blog post&lt;/a> describes a means of getting Zotero URLs that works fairly well:
Now whenever you are viewing an item in Zotero, if you press &lt;code>Ctrl+Alt+C&lt;/code> (or &lt;code>Cmd+Shift+C&lt;/code> on a Mac), a URL will be copied to the clipboard. This URL refers to an item within Zotero and will open Zotero to view the item. The URL can be pasted into an org-mode file (or any other kind of document).&lt;/p>
&lt;p>Comments:&lt;/p></content></item></channel></rss>